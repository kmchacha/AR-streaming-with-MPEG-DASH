Index: compat/msvc/stdint.h
===================================================================
--- compat/msvc/stdint.h	(revision 4998)
+++ compat/msvc/stdint.h	(working copy)
@@ -4,6 +4,7 @@
 #endif
 #if _MSC_VER > 1500
 #error local C99 type definition should only be used in Visual C++ before 2010
+} // namespace pcc_hm
 #endif
 
 /* a minimal set of C99 types for use with MSVC */
@@ -17,3 +18,4 @@
 typedef unsigned short int uint16_t;
 typedef unsigned int uint32_t;
 typedef unsigned __int64 uint64_t;
+
Index: doc/mainpage.h
===================================================================
--- doc/mainpage.h	(revision 4998)
+++ doc/mainpage.h	(working copy)
@@ -1,4 +1,5 @@
 #include "TLibCommon/CommonDef.h"
+namespace pcc_hm {
 
 /**
  * \file mainpage.h
@@ -63,3 +64,4 @@
  *  \defgroup TAppEncoder  TAppEncoder - Encoder application
  *  \defgroup TAppDecoder  TAppDecoder - Decoder application
  */
+
Index: source/App/TAppDecoder/TAppDecCfg.cpp
===================================================================
--- source/App/TAppDecoder/TAppDecCfg.cpp	(revision 4998)
+++ source/App/TAppDecoder/TAppDecCfg.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "TAppDecCfg.h"
 #include "TAppCommon/program_options_lite.h"
 #include "TLibCommon/TComChromaFormat.h"
+namespace pcc_hm {
 #ifdef WIN32
 #define strdup _strdup
 #endif
@@ -89,6 +90,10 @@
 #if O0043_BEST_EFFORT_DECODING
   ("ForceDecodeBitDepth",       m_forceDecodeBitDepth,                 0U,         "Force the decoder to operate at a particular bit-depth (best effort decoding)")
 #endif
+#if SAMPLE_STREAM
+  //  ("sampleStreamPrecisionByte",           m_SampleStreamUnitSizePrecisionBytes,          4,       "unit_size_precision_bytes")
+  ("fileformatSampleStream",              m_SampleStream,          false,       "Indicate the file format is sample stream")
+#endif
   ("OutputDecodedSEIMessagesFilename",  m_outputDecodedSEIMessagesFilename,    string(""), "When non empty, output decoded SEI messages to the indicated file. If file is '-', then output to stdout\n")
   ("ClipOutputVideoToRec709Range",      m_bClipOutputVideoToRec709Range,  false, "If true then clip output video to the Rec. 709 Range on saving")
 #if MCTS_ENC_CHECK
@@ -182,3 +187,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/TAppDecoder/TAppDecCfg.h
===================================================================
--- source/App/TAppDecoder/TAppDecCfg.h	(revision 4998)
+++ source/App/TAppDecoder/TAppDecCfg.h	(working copy)
@@ -44,6 +44,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include <vector>
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -71,6 +72,10 @@
 #if O0043_BEST_EFFORT_DECODING
   UInt          m_forceDecodeBitDepth;                ///< if non-zero, force the bit depth at the decoder (best effort decoding)
 #endif
+#if SAMPLE_STREAM
+  Bool          m_SampleStream;
+  UInt          m_SampleStreamUnitSizePrecisionBytes;
+ #endif
   std::string   m_outputDecodedSEIMessagesFilename;   ///< filename to output decoded SEI messages to. If '-', then use stdout. If empty, do not output details.
   Bool          m_bClipOutputVideoToRec709Range;      ///< If true, clip the output video to the Rec 709 range on saving.
 #if MCTS_ENC_CHECK
@@ -93,6 +98,10 @@
 #if O0043_BEST_EFFORT_DECODING
   , m_forceDecodeBitDepth(0)
 #endif
+#if SAMPLE_STREAM
+  , m_SampleStream(false)
+  , m_SampleStreamUnitSizePrecisionBytes(4)
+#endif
   , m_outputDecodedSEIMessagesFilename()
   , m_bClipOutputVideoToRec709Range(false)
 #if MCTS_ENC_CHECK
@@ -112,6 +121,8 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
 
+
Index: source/App/TAppDecoder/TAppDecTop.cpp
===================================================================
--- source/App/TAppDecoder/TAppDecTop.cpp	(revision 4998)
+++ source/App/TAppDecoder/TAppDecTop.cpp	(working copy)
@@ -47,6 +47,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -142,6 +143,11 @@
     AnnexBStats stats = AnnexBStats();
 
     InputNALUnit nalu;
+#if SAMPLE_STREAM
+    if(m_SampleStream){
+      sampleStreamNALUnit(bytestream, m_SampleStreamUnitSizePrecisionBytes, nalu.getBitstream().getFifo(), stats);
+    }else
+#endif
     byteStreamNALUnit(bytestream, nalu.getBitstream().getFifo(), stats);
 
     // call actual decoding function
@@ -177,6 +183,11 @@
           bytestream.reset();
           TComCodingStatistics::SetStatistics(backupStats);
 #else
+#if SAMPLE_STREAM
+          if(m_SampleStream)
+            bitstreamFile.seekg(location);
+          else
+#endif
           bitstreamFile.seekg(location-streamoff(3));
           bytestream.reset();
 #endif
@@ -971,3 +982,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/TAppDecoder/TAppDecTop.h
===================================================================
--- source/App/TAppDecoder/TAppDecTop.h	(revision 4998)
+++ source/App/TAppDecoder/TAppDecTop.h	(working copy)
@@ -47,6 +47,7 @@
 #include "TLibCommon/TComPicYuv.h"
 #include "TLibDecoder/TDecTop.h"
 #include "TAppDecCfg.h"
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -94,5 +95,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/App/TAppDecoder/decmain.cpp
===================================================================
--- source/App/TAppDecoder/decmain.cpp	(revision 4998)
+++ source/App/TAppDecoder/decmain.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include <stdio.h>
 #include <time.h>
 #include "TAppDecTop.h"
+namespace pcc_hm {
 
 //! \ingroup TAppDecoder
 //! \{
@@ -95,3 +96,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/TAppEncoder/TAppEncCfg.cpp
===================================================================
--- source/App/TAppEncoder/TAppEncCfg.cpp	(revision 4998)
+++ source/App/TAppEncoder/TAppEncCfg.cpp	(working copy)
@@ -45,6 +45,7 @@
 #include "TAppEncCfg.h"
 #include "TAppCommon/program_options_lite.h"
 #include "TLibEncoder/TEncRateCtrl.h"
+namespace pcc_hm {
 #ifdef WIN32
 #define strdup _strdup
 #endif
@@ -132,6 +133,10 @@
 #if EXTENSION_360_VIDEO
 , m_ext360(*this)
 #endif
+#if SAMPLE_STREAM
+, m_fileformatSampleStream(false)
+, m_SampleStreamUnitSizePrecisionBytes(4)
+#endif
 {
   m_aidQP = NULL;
   m_startOfCodedInterval = NULL;
@@ -782,10 +787,20 @@
   ("WarnUnknowParameter,w",                           warnUnknowParameter,                                  0, "warn for unknown configuration parameters instead of failing")
 
   // File, I/O and source parameters
+#if SAMPLE_STREAM
+  ("fileformateSampleStream",                         m_fileformatSampleStream,                             false, "FileFormat: 1. SampleStream 0.ByteStream(AnnexB)")
+  //("sampleStreamPrecisionBytes",                     m_SampleStreamUnitSizePrecisionBytes,                 4, "FileFormat: Unit Size Precision in Byte for SampleStream")
+#endif
   ("InputFile,i",                                     m_inputFileName,                             string(""), "Original YUV input file name")
   ("InputPathPrefix,-ipp",                            inputPathPrefix,                             string(""), "pathname to prepend to input filename")
   ("BitstreamFile,b",                                 m_bitstreamFileName,                         string(""), "Bitstream output file name")
   ("ReconFile,o",                                     m_reconFileName,                             string(""), "Reconstructed YUV output file name")
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  ("UsePccMotionEstimation",                          m_usePCCExt,                                      false, "Use modified motion estimation for PCC content")
+	  ("BlockToPatchFile",                            m_blockToPatchFileName,                      string(""), "Input block to patch file name")
+	  ("OccupancyMapFile",                            m_occupancyMapFileName,                      string(""), "Input occupancy map file name")
+	  ("PatchInfoFile",                               m_patchInfoFileName,                         string(""), "Input patch info file name")
+#endif
   ("SourceWidth,-wdt",                                m_iSourceWidth,                                       0, "Source picture width")
   ("SourceHeight,-hgt",                               m_iSourceHeight,                                      0, "Source picture height")
   ("InputBitDepth",                                   m_inputBitDepth[CHANNEL_TYPE_LUMA],                   8, "Bit-depth of input file")
@@ -3083,6 +3098,18 @@
   printf("Input          File                    : %s\n", m_inputFileName.c_str()          );
   printf("Bitstream      File                    : %s\n", m_bitstreamFileName.c_str()      );
   printf("Reconstruction File                    : %s\n", m_reconFileName.c_str()          );
+#if SAMPLE_STREAM
+  Bool        m_fileformatSampleStream;
+  UInt        m_SampleStreamUnitSizePrecisionBytes;
+#endif
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  printf("PCCExt                                 : %s\n", (m_usePCCExt ? "Enabled" : "Disabled"));
+  if (m_usePCCExt) {
+	  printf("BlockToPatch   File                    : %s\n", (m_blockToPatchFileName.c_str()));
+	  printf("OccupancyMap   File                    : %s\n", (m_occupancyMapFileName.c_str()));
+	  printf("PatchInfo      File                    : %s\n", (m_patchInfoFileName.c_str()));
+  }
+#endif
   printf("Real     Format                        : %dx%d %gHz\n", m_iSourceWidth - m_confWinLeft - m_confWinRight, m_iSourceHeight - m_confWinTop - m_confWinBottom, (Double)m_iFrameRate/m_temporalSubsampleRatio );
   printf("Internal Format                        : %dx%d %gHz\n", m_iSourceWidth, m_iSourceHeight, (Double)m_iFrameRate/m_temporalSubsampleRatio );
   printf("Sequence PSNR output                   : %s\n", (m_printMSEBasedSequencePSNR ? "Linear average, MSE-based" : "Linear average only") );
@@ -3350,3 +3377,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/TAppEncoder/TAppEncCfg.h
===================================================================
--- source/App/TAppEncoder/TAppEncCfg.h	(revision 4998)
+++ source/App/TAppEncoder/TAppEncCfg.h	(working copy)
@@ -46,6 +46,7 @@
 #endif
 #include <sstream>
 #include <vector>
+namespace pcc_hm {
 //! \ingroup TAppEncoder
 //! \{
 
@@ -72,7 +73,12 @@
   std::string m_inputFileName;                                ///< source file name
   std::string m_bitstreamFileName;                            ///< output bitstream file
   std::string m_reconFileName;                                ///< output reconstruction file
-
+#if PCC_ME_EXT
+  Bool        m_usePCCExt;
+  std::string m_blockToPatchFileName;
+  std::string m_occupancyMapFileName;
+  std::string m_patchInfoFileName;
+#endif
   // Lambda modifiers
   Double    m_adLambdaModifier[ MAX_TLAYER ];                 ///< Lambda modifier array for each temporal layer
   std::vector<Double> m_adIntraLambdaModifier;                ///< Lambda modifier for Intra pictures, one for each temporal layer. If size>temporalLayer, then use [temporalLayer], else if size>0, use [size()-1], else use m_adLambdaModifier.
@@ -549,5 +555,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TAPPENCCFG__
 
+
Index: source/App/TAppEncoder/TAppEncTop.cpp
===================================================================
--- source/App/TAppEncoder/TAppEncTop.cpp	(revision 4998)
+++ source/App/TAppEncoder/TAppEncTop.cpp	(working copy)
@@ -49,6 +49,7 @@
 #if EXTENSION_360_VIDEO
 #include "TAppEncHelper360/TExt360AppEncTop.h"
 #endif
+namespace pcc_hm {
 
 using namespace std;
 
@@ -87,6 +88,15 @@
   }
   m_cTEncTop.setVPS(&vps);
 
+#if PCC_ME_EXT
+  m_cTEncTop.setUsePCCExt(m_usePCCExt);
+  if (m_usePCCExt) {
+	m_cTEncTop.setBlockToPatchFileName(m_blockToPatchFileName);
+	m_cTEncTop.setOccupancyMapFileName(m_occupancyMapFileName);
+	//m_cTencTop.setPatchInfoFileName                                 ( m_patchInfoFileName );
+  }
+#endif
+
   m_cTEncTop.setProfile                                           ( m_profile);
   m_cTEncTop.setLevel                                             ( m_levelTier, m_level);
   m_cTEncTop.setProgressiveSourceFlag                             ( m_progressiveSourceFlag);
@@ -605,6 +615,51 @@
   xCreateLib();
   xInitLib(m_isField);
 
+#if PCC_ME_EXT
+  if (m_usePCCExt)
+  {
+	  printf("\nReading the aux info files\n");
+	  FILE* patchFile = NULL;
+	  patchFile = fopen(m_patchInfoFileName.c_str(), "rb");
+
+	  for (Int i = 0; i < PCC_ME_EXT_MAX_NUM_FRAMES; i++)
+	  {
+		  long long readSize = fread(&g_numPatches[i], sizeof(long long), 1, patchFile);
+
+		  if (readSize != 1 && readSize != 0)
+		  {
+			  printf("error: Wrong Patch data group file");
+		  }
+
+		  for (Int patchIdx = 0; patchIdx < g_numPatches[i]; patchIdx++)
+		  {
+			  readSize = fread(&g_projectionIndex[i][patchIdx], sizeof(long long), 1, patchFile);
+
+			  if (readSize != 1)
+			  {
+				  printf("error: Wrong Auxiliary data format");
+			  }
+
+			  readSize = fread(g_patch2DInfo[i][patchIdx], sizeof(long long), 4, patchFile);
+
+			  if (readSize != 4)
+			  {
+				  printf("error: Wrong Auxiliary data format");
+			  }
+
+			  readSize = fread(g_patch3DInfo[i][patchIdx], sizeof(long long), 3, patchFile);
+
+			  if (readSize != 3)
+			  {
+				  printf("error: Wrong Auxiliary data format");
+			  }
+		  }
+	  }
+
+	  fclose(patchFile);
+  }
+#endif
+
   printChromaFormat();
 
   // main encoder loop
@@ -819,8 +874,17 @@
       }
 
       const AccessUnit& au = *(iterBitstream++);
+#if SAMPLE_STREAM
+      if(m_fileformatSampleStream){
+        const vector<UInt>& stats = writeSampleStream(bitstreamFile, m_SampleStreamUnitSizePrecisionBytes, au);
+        rateStatsAccum(au, stats);
+      } else{
+#endif
       const vector<UInt>& stats = writeAnnexB(bitstreamFile, au);
       rateStatsAccum(au, stats);
+#if SAMPLE_STREAM
+      }
+#endif
     }
   }
 }
@@ -906,3 +970,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/TAppEncoder/TAppEncTop.h
===================================================================
--- source/App/TAppEncoder/TAppEncTop.h	(revision 4998)
+++ source/App/TAppEncoder/TAppEncTop.h	(working copy)
@@ -45,6 +45,7 @@
 #include "TLibVideoIO/TVideoIOYuv.h"
 #include "TLibCommon/AccessUnit.h"
 #include "TAppEncCfg.h"
+namespace pcc_hm {
 
 //! \ingroup TAppEncoder
 //! \{
@@ -99,5 +100,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TAPPENCTOP__
 
+
Index: source/App/TAppEncoder/encmain.cpp
===================================================================
--- source/App/TAppEncoder/encmain.cpp	(revision 4998)
+++ source/App/TAppEncoder/encmain.cpp	(working copy)
@@ -44,6 +44,7 @@
 //! \{
 
 #include "../Lib/TLibCommon/Debug.h"
+namespace pcc_hm {
 
 // ====================================================================================================================
 // Main function
@@ -108,3 +109,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/TAppMCTSExtractor/TAppMctsExtCfg.cpp
===================================================================
--- source/App/TAppMCTSExtractor/TAppMctsExtCfg.cpp	(revision 4998)
+++ source/App/TAppMCTSExtractor/TAppMctsExtCfg.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include <string>
 #include "TAppMctsExtCfg.h"
 #include "TAppCommon/program_options_lite.h"
+namespace pcc_hm {
 
 #ifdef WIN32
 #define strdup _strdup
@@ -97,3 +98,6 @@
 #endif
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/TAppMCTSExtractor/TAppMctsExtCfg.h
===================================================================
--- source/App/TAppMCTSExtractor/TAppMctsExtCfg.h	(revision 4998)
+++ source/App/TAppMCTSExtractor/TAppMctsExtCfg.h	(working copy)
@@ -43,6 +43,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include <vector>
+namespace pcc_hm {
 
 #if MCTS_EXTRACTION
 
@@ -79,4 +80,6 @@
 
 #endif
 
+} // namespace pcc_hm
 #endif
+
Index: source/App/TAppMCTSExtractor/TAppMctsExtTop.cpp
===================================================================
--- source/App/TAppMCTSExtractor/TAppMctsExtTop.cpp	(revision 4998)
+++ source/App/TAppMCTSExtractor/TAppMctsExtTop.cpp	(working copy)
@@ -44,12 +44,13 @@
 
 #include "TAppMctsExtTop.h"
 #include "TLibDecoder/AnnexBread.h"
-#include "TLibDecoder/NALread.h"
-#include "TLibEncoder/NALwrite.h"
-#include "TLibCommon/SEI.h"
-
-#if MCTS_EXTRACTION
-  //! \ingroup TAppMctsExt
+#include "TLibDecoder/NALread.h"
+#include "TLibEncoder/NALwrite.h"
+#include "TLibCommon/SEI.h"
+namespace pcc_hm {
+
+#if MCTS_EXTRACTION
+  //! \ingroup TAppMctsExt
   //! \{
 
   // ====================================================================================================================
@@ -403,6 +404,9 @@
     }
     bitstreamFile << nalu.m_nalUnitData.str();
 
-  }
-}
-#endif
+  }
+}
+#endif
+
+
+} // namespace pcc_hm
Index: source/App/TAppMCTSExtractor/TAppMctsExtTop.h
===================================================================
--- source/App/TAppMCTSExtractor/TAppMctsExtTop.h	(revision 4998)
+++ source/App/TAppMCTSExtractor/TAppMctsExtTop.h	(working copy)
@@ -45,13 +45,14 @@
 #include "TLibDecoder/TDecTop.h"
 #include "TLibEncoder/TEncTop.h"
 #include "TLibCommon/AccessUnit.h"
+
+#if MCTS_EXTRACTION
+#include "TAppMctsExtCfg.h"
+namespace pcc_hm {
+
+  //! \ingroup TAppMctsExt
+  //! \{
 
-#if MCTS_EXTRACTION
-#include "TAppMctsExtCfg.h"
-
-  //! \ingroup TAppMctsExt
-  //! \{
-
   // ====================================================================================================================
   // Class definition
   // ====================================================================================================================
@@ -91,7 +92,9 @@
   Void  xWriteOutput(std::ostream& bitstreamFile, const AccessUnit accessUnit); ///< write AU into output bitstream
 };
 
-//! \}
-
-#endif
-#endif
+//! \}
+
+#endif
+} // namespace pcc_hm
+#endif
+
Index: source/App/TAppMCTSExtractor/mctsExtmain.cpp
===================================================================
--- source/App/TAppMCTSExtractor/mctsExtmain.cpp	(revision 4998)
+++ source/App/TAppMCTSExtractor/mctsExtmain.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include <stdio.h>
 #include <time.h>
 #include "TAppMctsExtTop.h"
+namespace pcc_hm {
 
   //! \ingroup TAppMctsExt
   //! \{
@@ -90,3 +91,6 @@
   return returnCode;
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/App/utils/BitrateTargeting/ExtractBitrates.cpp
===================================================================
--- source/App/utils/BitrateTargeting/ExtractBitrates.cpp	(revision 4998)
+++ source/App/utils/BitrateTargeting/ExtractBitrates.cpp	(working copy)
@@ -37,6 +37,7 @@
 #include <cassert>
 #include <limits>
 #include <map>
+namespace pcc_hm {
 
 namespace
 {
@@ -210,3 +211,6 @@
 
   return result;
 }
+
+
+} // namespace pcc_hm
Index: source/App/utils/BitrateTargeting/ExtractBitrates.h
===================================================================
--- source/App/utils/BitrateTargeting/ExtractBitrates.h	(revision 4998)
+++ source/App/utils/BitrateTargeting/ExtractBitrates.h	(working copy)
@@ -36,6 +36,7 @@
 
 #include "RuntimeError.h"
 #include <vector>
+namespace pcc_hm {
 
 /// An error occured while parsing a POC line from within a log file
 class POCParseException: public RuntimeError
@@ -68,4 +69,6 @@
 /// \throw NonContiguousQPSetException if the QP set from the log file was not contiguous
 std::vector< double > extractBitratesForTemporalLayers( std::istream& i );
 
+} // namespace pcc_hm
 #endif
+
Index: source/App/utils/BitrateTargeting/ExtractBitratesMain.cpp
===================================================================
--- source/App/utils/BitrateTargeting/ExtractBitratesMain.cpp	(revision 4998)
+++ source/App/utils/BitrateTargeting/ExtractBitratesMain.cpp	(working copy)
@@ -34,6 +34,7 @@
 #include <iostream>
 #include <cassert>
 #include "ExtractBitrates.h"
+namespace pcc_hm {
 
 /// In out, finds the first occurence of toFind and replaces it with "e"
 /// \pre toFind must have a size of 2
@@ -97,3 +98,6 @@
     return 1;
   }
 }
+
+
+} // namespace pcc_hm
Index: source/App/utils/BitrateTargeting/GuessLambdaModifiers.cpp
===================================================================
--- source/App/utils/BitrateTargeting/GuessLambdaModifiers.cpp	(revision 4998)
+++ source/App/utils/BitrateTargeting/GuessLambdaModifiers.cpp	(working copy)
@@ -35,6 +35,7 @@
 #include <limits>
 #include <cassert>
 #include <cmath>
+namespace pcc_hm {
 
 namespace
 {
@@ -482,3 +483,6 @@
   } while( indexIter != firstIndexSet.end( ) );
   assert( resultIter == resultVector.end( ) );  // The index set and the result vector should be the same size
 }
+
+
+} // namespace pcc_hm
Index: source/App/utils/BitrateTargeting/GuessLambdaModifiers.h
===================================================================
--- source/App/utils/BitrateTargeting/GuessLambdaModifiers.h	(revision 4998)
+++ source/App/utils/BitrateTargeting/GuessLambdaModifiers.h	(working copy)
@@ -40,6 +40,7 @@
 #include <list>
 #include <set>
 #include <limits>
+namespace pcc_hm {
 
 /// Thrown if there is an error parsing the initial adjustment parameter
 class InitialAdjustmentParameterParseException: public RuntimeError
@@ -145,4 +146,6 @@
     std::istream& targetsIstream,
     std::istream& metaLogIstream );
 
+} // namespace pcc_hm
 #endif
+
Index: source/App/utils/BitrateTargeting/GuessLambdaModifiersMain.cpp
===================================================================
--- source/App/utils/BitrateTargeting/GuessLambdaModifiersMain.cpp	(revision 4998)
+++ source/App/utils/BitrateTargeting/GuessLambdaModifiersMain.cpp	(working copy)
@@ -35,6 +35,7 @@
 #include "RuntimeError.h"
 #include "GuessLambdaModifiers.h"
 #include <iostream>
+namespace pcc_hm {
 
 class WrongNumberOfArgumentsException: public RuntimeError
 {
@@ -73,3 +74,6 @@
   }
   return 1;
 }
+
+
+} // namespace pcc_hm
Index: source/App/utils/BitrateTargeting/RuntimeError.h
===================================================================
--- source/App/utils/BitrateTargeting/RuntimeError.h	(revision 4998)
+++ source/App/utils/BitrateTargeting/RuntimeError.h	(working copy)
@@ -36,6 +36,7 @@
 
 #include <sstream>
 #include <stdexcept>
+namespace pcc_hm {
 
 /// This class serves the same purpose as std::runtime_error, but it can be more convenient to use
 class RuntimeError: public std::runtime_error
@@ -73,4 +74,6 @@
   return left << right.what( );
 }
 
+} // namespace pcc_hm
 #endif
+
Index: source/App/utils/annexBbytecount.cpp
===================================================================
--- source/App/utils/annexBbytecount.cpp	(revision 4998)
+++ source/App/utils/annexBbytecount.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include <string.h>
 
 #include "TLibDecoder/AnnexBread.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -239,3 +240,6 @@
 
   return 0;
 }
+
+
+} // namespace pcc_hm
Index: source/App/utils/convert_NtoMbit_YCbCr.cpp
===================================================================
--- source/App/utils/convert_NtoMbit_YCbCr.cpp	(revision 4998)
+++ source/App/utils/convert_NtoMbit_YCbCr.cpp	(working copy)
@@ -36,6 +36,7 @@
 #include "TLibCommon/TComPicYuv.h"
 #include "TLibVideoIO/TVideoIOYuv.h"
 #include "TAppCommon/program_options_lite.h"
+namespace pcc_hm {
 
 using namespace std;
 namespace po = df::program_options_lite;
@@ -146,3 +147,6 @@
 
   return EXIT_SUCCESS;
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TAppCommon/program_options_lite.cpp
===================================================================
--- source/Lib/TAppCommon/program_options_lite.cpp	(revision 4998)
+++ source/Lib/TAppCommon/program_options_lite.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include <map>
 #include <algorithm>
 #include "program_options_lite.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -564,3 +565,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TAppCommon/program_options_lite.h
===================================================================
--- source/Lib/TAppCommon/program_options_lite.h	(revision 4998)
+++ source/Lib/TAppCommon/program_options_lite.h	(working copy)
@@ -36,6 +36,8 @@
 #include <list>
 #include <map>
 
+namespace pcc_hm {
+
 #ifndef __PROGRAM_OPTIONS_LITE__
 #define __PROGRAM_OPTIONS_LITE__
 
@@ -242,4 +244,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/AccessUnit.h
===================================================================
--- source/Lib/TLibCommon/AccessUnit.h	(revision 4998)
+++ source/Lib/TLibCommon/AccessUnit.h	(working copy)
@@ -43,6 +43,7 @@
 
 #include <list>
 #include "NAL.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -73,4 +74,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/CommonDef.h
===================================================================
--- source/Lib/TLibCommon/CommonDef.h	(revision 4998)
+++ source/Lib/TLibCommon/CommonDef.h	(working copy)
@@ -43,6 +43,8 @@
 #include <assert.h>
 #include <limits>
 
+#define SAMPLE_STREAM 1
+
 #if _MSC_VER > 1000
 // disable "signed and unsigned mismatch"
 #pragma warning( disable : 4018 )
@@ -50,6 +52,7 @@
 #pragma warning( disable : 4800 )
 #endif // _MSC_VER > 1000
 #include "TypeDef.h"
+namespace pcc_hm {
 
 #ifdef _MSC_VER
 #if _MSC_VER <= 1500
@@ -312,5 +315,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // end of #ifndef  __COMMONDEF__
 
+
Index: source/Lib/TLibCommon/ContextModel.cpp
===================================================================
--- source/Lib/TLibCommon/ContextModel.cpp	(revision 4998)
+++ source/Lib/TLibCommon/ContextModel.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include <algorithm>
 
 #include "ContextModel.h"
+namespace pcc_hm {
 
 using namespace std;
 //! \ingroup TLibCommon
@@ -127,3 +128,6 @@
 #endif
 };
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/ContextModel.h
===================================================================
--- source/Lib/TLibCommon/ContextModel.h	(revision 4998)
+++ source/Lib/TLibCommon/ContextModel.h	(working copy)
@@ -45,6 +45,7 @@
 
 #include "CommonDef.h"
 #include "TComRom.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -107,5 +108,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibCommon/ContextModel3DBuffer.cpp
===================================================================
--- source/Lib/TLibCommon/ContextModel3DBuffer.cpp	(revision 4998)
+++ source/Lib/TLibCommon/ContextModel3DBuffer.cpp	(working copy)
@@ -36,6 +36,7 @@
 */
 
 #include "ContextModel3DBuffer.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -118,3 +119,6 @@
   return cost;
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/ContextModel3DBuffer.h
===================================================================
--- source/Lib/TLibCommon/ContextModel3DBuffer.h	(revision 4998)
+++ source/Lib/TLibCommon/ContextModel3DBuffer.h	(working copy)
@@ -43,6 +43,7 @@
 
 #include "CommonDef.h"
 #include "ContextModel.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -94,4 +95,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // _HM_CONTEXT_MODEL_3DBUFFER_H_
+
Index: source/Lib/TLibCommon/ContextTables.h
===================================================================
--- source/Lib/TLibCommon/ContextTables.h	(revision 4998)
+++ source/Lib/TLibCommon/ContextTables.h	(working copy)
@@ -39,6 +39,7 @@
 #ifndef __CONTEXTTABLES__
 #define __CONTEXTTABLES__
 #include <cstring>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -564,4 +565,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/Debug.cpp
===================================================================
--- source/Lib/TLibCommon/Debug.cpp	(revision 4998)
+++ source/Lib/TLibCommon/Debug.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "TComDataCU.h"
 #include "TComPic.h"
 #include "TComYuv.h"
+namespace pcc_hm {
 
 static const UInt settingNameWidth  = 66;
 static const UInt settingHelpWidth  = 84;
@@ -182,6 +183,7 @@
   PRINT_CONSTANT(O0043_BEST_EFFORT_DECODING,                                        settingNameWidth, settingValueWidth);
 
   PRINT_CONSTANT(ME_ENABLE_ROUNDING_OF_MVS,                                         settingNameWidth, settingValueWidth);
+  PRINT_CONSTANT(PCC_ME_EXT,                                                        settingNameWidth, settingValueWidth);
 
   //------------------------------------------------
 
@@ -490,3 +492,6 @@
   }
 }
 #endif
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/Debug.h
===================================================================
--- source/Lib/TLibCommon/Debug.h	(revision 4998)
+++ source/Lib/TLibCommon/Debug.h	(working copy)
@@ -45,6 +45,7 @@
 #include <stdlib.h>
 #include <sstream>
 #include <TLibCommon/CommonDef.h>
+namespace pcc_hm {
 
 #if DEBUG_STRING
 extern const TChar *debug_reorder_data_token[2/*Inter=0, Intra block copy=1*/][MAX_NUM_COMPONENT+1];
@@ -275,4 +276,6 @@
 #endif
 
 
+} // namespace pcc_hm
 #endif /* __DEBUG__ */
+
Index: source/Lib/TLibCommon/NAL.h
===================================================================
--- source/Lib/TLibCommon/NAL.h	(revision 4998)
+++ source/Lib/TLibCommon/NAL.h	(working copy)
@@ -38,6 +38,7 @@
 
 #include <sstream>
 #include "CommonDef.h"
+namespace pcc_hm {
 
 class TComOutputBitstream;
 
@@ -121,4 +122,6 @@
 //! \}
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/SEI.cpp
===================================================================
--- source/Lib/TLibCommon/SEI.cpp	(revision 4998)
+++ source/Lib/TLibCommon/SEI.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "CommonDef.h"
 #include "SEI.h"
 #include <iostream>
+namespace pcc_hm {
 
 const std::vector<SEI::PayloadType> SEI::prefix_sei_messages({
   SEI::BUFFERING_PERIOD,
@@ -327,3 +328,6 @@
     default:                                        return "Unknown";
   }
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/SEI.h
===================================================================
--- source/Lib/TLibCommon/SEI.h	(revision 4998)
+++ source/Lib/TLibCommon/SEI.h	(working copy)
@@ -41,6 +41,7 @@
 
 #include "CommonDef.h"
 #include "libmd5/MD5.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -1124,5 +1125,7 @@
   RNSEIWindowVec m_regions;
   std::vector< SEIListOfIndices > m_rnSeiMessages;
 };
+} // namespace pcc_hm
 #endif
 //! \}
+
Index: source/Lib/TLibCommon/TComBitCounter.h
===================================================================
--- source/Lib/TLibCommon/TComBitCounter.h	(revision 4998)
+++ source/Lib/TLibCommon/TComBitCounter.h	(working copy)
@@ -43,6 +43,7 @@
 #endif // _MSC_VER > 1000
 
 #include "TComBitStream.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -70,4 +71,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComBitStream.cpp
===================================================================
--- source/Lib/TLibCommon/TComBitStream.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComBitStream.cpp	(working copy)
@@ -40,6 +40,7 @@
 #include "TComBitStream.h"
 #include <string.h>
 #include <memory.h>
+namespace pcc_hm {
 
 using namespace std;
 
@@ -410,3 +411,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComBitStream.h
===================================================================
--- source/Lib/TLibCommon/TComBitStream.h	(revision 4998)
+++ source/Lib/TLibCommon/TComBitStream.h	(working copy)
@@ -46,6 +46,7 @@
 #include <vector>
 #include <stdio.h>
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -228,4 +229,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComCABACTables.cpp
===================================================================
--- source/Lib/TLibCommon/TComCABACTables.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComCABACTables.cpp	(working copy)
@@ -36,6 +36,7 @@
  */
 
 #include "TComCABACTables.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -121,3 +122,6 @@
 };
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComCABACTables.h
===================================================================
--- source/Lib/TLibCommon/TComCABACTables.h	(revision 4998)
+++ source/Lib/TLibCommon/TComCABACTables.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComRom.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -58,4 +59,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComChromaFormat.cpp
===================================================================
--- source/Lib/TLibCommon/TComChromaFormat.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComChromaFormat.cpp	(working copy)
@@ -37,6 +37,7 @@
 #include "TComDataCU.h"
 #include "TComTrQuant.h"
 #include "TComTU.h"
+namespace pcc_hm {
 
 
 
@@ -161,3 +162,6 @@
 
 
 //----------------------------------------------------------------------------------------------------------------------
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComChromaFormat.h
===================================================================
--- source/Lib/TLibCommon/TComChromaFormat.h	(revision 4998)
+++ source/Lib/TLibCommon/TComChromaFormat.h	(working copy)
@@ -42,6 +42,7 @@
 #include <vector>
 #include <assert.h>
 #include "Debug.h"
+namespace pcc_hm {
 
 //======================================================================================================================
 //Chroma format utility functions  =====================================================================================
@@ -274,4 +275,6 @@
 //End  =================================================================================================================
 //======================================================================================================================
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComCodingStatistics.h
===================================================================
--- source/Lib/TLibCommon/TComCodingStatistics.h	(revision 4998)
+++ source/Lib/TLibCommon/TComCodingStatistics.h	(working copy)
@@ -40,6 +40,7 @@
 #include <map>
 #include <math.h>
 #include "TComChromaFormat.h"
+namespace pcc_hm {
 
 static const Int64 TCOMCODINGSTATISTICS_ENTROPYSCALE=32768;
 
@@ -486,4 +487,6 @@
     }
 };
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComDataCU.cpp
===================================================================
--- source/Lib/TLibCommon/TComDataCU.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComDataCU.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include "TComDataCU.h"
 #include "TComTU.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -4045,3 +4046,6 @@
 }
 #endif
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComDataCU.h
===================================================================
--- source/Lib/TLibCommon/TComDataCU.h	(revision 4998)
+++ source/Lib/TLibCommon/TComDataCU.h	(working copy)
@@ -48,6 +48,7 @@
 #include "TComSlice.h"
 #include "TComRdCost.h"
 #include "TComPattern.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -668,4 +669,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComHash.cpp
===================================================================
--- source/Lib/TLibCommon/TComHash.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComHash.cpp	(working copy)
@@ -37,6 +37,7 @@
 
 #include "CommonDef.h"
 #include "TComHash.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -670,3 +671,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComHash.h
===================================================================
--- source/Lib/TLibCommon/TComHash.h	(revision 4998)
+++ source/Lib/TLibCommon/TComHash.h	(working copy)
@@ -43,6 +43,7 @@
 #include "TComPicSym.h"
 #include "TComPicYuv.h"
 #include <vector>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -127,4 +128,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMHASH__
+
Index: source/Lib/TLibCommon/TComInterpolationFilter.cpp
===================================================================
--- source/Lib/TLibCommon/TComInterpolationFilter.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComInterpolationFilter.cpp	(working copy)
@@ -49,6 +49,7 @@
 #if VECTOR_CODING__INTERPOLATION_FILTER && (RExt__HIGH_BIT_DEPTH_SUPPORT==0)
 #include <emmintrin.h>
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -629,3 +630,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComInterpolationFilter.h
===================================================================
--- source/Lib/TLibCommon/TComInterpolationFilter.h	(revision 4998)
+++ source/Lib/TLibCommon/TComInterpolationFilter.h	(working copy)
@@ -40,6 +40,7 @@
 #define __TCOMINTERPOLATIONFILTER__
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -78,4 +79,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComList.h
===================================================================
--- source/Lib/TLibCommon/TComList.h	(revision 4998)
+++ source/Lib/TLibCommon/TComList.h	(working copy)
@@ -47,6 +47,7 @@
 #include "CommonDef.h"
 
 #include <cstdlib>
+namespace pcc_hm {
 using namespace std;
 
 //! \ingroup TLibCommon
@@ -119,4 +120,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComLoopFilter.cpp
===================================================================
--- source/Lib/TLibCommon/TComLoopFilter.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComLoopFilter.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include "TComSlice.h"
 #include "TComMv.h"
 #include "TComTU.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -960,3 +961,6 @@
   return abs( piSrc[0] - 2*piSrc[iOffset] + piSrc[iOffset*2] );
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComLoopFilter.h
===================================================================
--- source/Lib/TLibCommon/TComLoopFilter.h	(revision 4998)
+++ source/Lib/TLibCommon/TComLoopFilter.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "CommonDef.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -140,4 +141,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComMotionInfo.cpp
===================================================================
--- source/Lib/TLibCommon/TComMotionInfo.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComMotionInfo.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include "TComMotionInfo.h"
 #include "assert.h"
 #include <stdlib.h>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -374,3 +375,6 @@
 }
 #endif
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComMotionInfo.h
===================================================================
--- source/Lib/TLibCommon/TComMotionInfo.h	(revision 4998)
+++ source/Lib/TLibCommon/TComMotionInfo.h	(working copy)
@@ -42,6 +42,7 @@
 #include <memory.h>
 #include "CommonDef.h"
 #include "TComMv.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -164,4 +165,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMMOTIONINFO__
+
Index: source/Lib/TLibCommon/TComMv.h
===================================================================
--- source/Lib/TLibCommon/TComMv.h	(revision 4998)
+++ source/Lib/TLibCommon/TComMv.h	(working copy)
@@ -39,6 +39,7 @@
 #define __TCOMMV__
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -179,4 +180,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMMV__
+
Index: source/Lib/TLibCommon/TComPattern.cpp
===================================================================
--- source/Lib/TLibCommon/TComPattern.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComPattern.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "TComTU.h"
 #include "Debug.h"
 #include "TComPrediction.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -84,7 +85,12 @@
                               Int stride,
                               Int bitDepthLuma,
                               Int roiPosX,
-                              Int roiPosY)
+                              Int roiPosY
+#if PCC_ME_EXT
+	                        , Int refIdx,
+	                          RefPicList refPicList
+#endif
+                              )
 #else
 Void TComPattern::initPattern (Pel* piY,
                                Int roiWidth,
@@ -98,6 +104,10 @@
   m_roiHeight = roiHeight;
   m_patternStride = stride;
   m_bitDepth = bitDepthLuma;
+#if PCC_ME_EXT
+  m_refIdx = refIdx;
+  m_refPicList = refPicList;
+#endif
 #if MCTS_ENC_CHECK
   m_roiPosX       = roiPosX;
   m_roiPosY       = roiPosY;
@@ -748,3 +758,6 @@
   return iNumIntra;
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComPattern.h
===================================================================
--- source/Lib/TLibCommon/TComPattern.h	(revision 4998)
+++ source/Lib/TLibCommon/TComPattern.h	(working copy)
@@ -40,6 +40,7 @@
 
 // Include files
 #include "CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -61,6 +62,11 @@
   Int   m_patternStride;
   Int   m_bitDepth;
 
+#if PCC_ME_EXT
+  Int   m_refIdx;
+  RefPicList m_refPicList;
+#endif
+
 #if MCTS_ENC_CHECK  
   Int   m_roiPosX;
   Int   m_roiPosY;
@@ -76,6 +82,12 @@
   Int   getROIYHeight() const     { return m_roiHeight;      }
   Int   getPatternLStride() const { return m_patternStride;  }
   Int   getBitDepthY() const      { return m_bitDepth;       }
+
+#if PCC_ME_EXT
+  Int   getRefIndex() const       { return m_refIdx;         }
+  RefPicList getRefPicList() const { return m_refPicList;    }
+#endif
+
 #if MCTS_ENC_CHECK
   Int   getROIYPosX() const       { return m_roiPosX; }
   Int   getROIYPosY() const       { return m_roiPosY; }
@@ -101,6 +113,10 @@
   , m_roiHeight(0)
   , m_patternStride(0)
   , m_bitDepth(0)
+#if PCC_ME_EXT
+  , m_refIdx(0)
+  , m_refPicList(REF_PIC_LIST_X)
+#endif
 #if MCTS_ENC_CHECK
   , m_roiPosX(0)
   , m_roiPosY(0)
@@ -118,7 +134,11 @@
 
   /// set parameters from Pel buffers for accessing neighbouring pixels
 #if MCTS_ENC_CHECK
+#if PCC_ME_EXT
+  Void initPattern(Pel* piY, Int roiWidth, Int roiHeight, Int stride, Int bitDepthLuma, Int roiPosX, Int roiPosY, Int refIdx = 0, RefPicList refPicList = REF_PIC_LIST_X);
+#else
   Void initPattern(Pel* piY, Int roiWidth, Int roiHeight, Int stride, Int bitDepthLuma, Int roiPosX, Int roiPosY);
+#endif
   Void setTileBorders(Int tileLeftTopPelPosX, Int tileLeftTopPelPosY, Int tileRightBottomPelPosX, Int tileRightBottomPelPosY);
 #else
   Void initPattern(Pel* piY, Int roiWidth, Int roiHeight, Int stride, Int bitDepthLuma);
@@ -127,4 +147,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPATTERN__
+
Index: source/Lib/TLibCommon/TComPic.cpp
===================================================================
--- source/Lib/TLibCommon/TComPic.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComPic.cpp	(working copy)
@@ -37,6 +37,7 @@
 
 #include "TComPic.h"
 #include "SEI.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -63,6 +64,10 @@
   {
     m_apcPicYuv[i]      = NULL;
   }
+#if PCC_ME_EXT
+  m_blockToPatch        = NULL;
+  m_occupancyMap        = NULL;
+#endif
 }
 
 TComPic::~TComPic()
@@ -105,6 +110,13 @@
   }
 #endif
 
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  {
+	  m_blockToPatch = new long long[iWidth / 16 * iHeight / 16];
+	  m_occupancyMap = new Int[iWidth * iHeight];
+  }
+#endif
+
   // there are no SEI messages associated with this picture initially
   if (m_SEIs.size() > 0)
   {
@@ -212,6 +224,14 @@
     m_apcPicYuvCSC = NULL;
   }
 
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  delete m_blockToPatch;
+  m_blockToPatch = NULL;
+
+  delete m_occupancyMap;
+  m_occupancyMap = NULL;
+#endif
+
   deleteSEIs(m_SEIs);
 }
 
@@ -377,3 +397,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComPic.h
===================================================================
--- source/Lib/TLibCommon/TComPic.h	(revision 4998)
+++ source/Lib/TLibCommon/TComPic.h	(working copy)
@@ -44,6 +44,7 @@
 #include "TComPicYuv.h"
 #include "TComBitStream.h"
 #include "TComHash.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -70,6 +71,10 @@
 
   TComPicYuv*           m_pcPicYuvPred;           //  Prediction
   TComPicYuv*           m_pcPicYuvResi;           //  Residual
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  long long*            m_blockToPatch;
+  Int*                  m_occupancyMap;
+#endif
   Bool                  m_bReconstructed;
   Bool                  m_bNeededForOutput;
   UInt                  m_uiCurrSliceIdx;         // Index of current slice
@@ -91,6 +96,11 @@
   TComPic();
   virtual ~TComPic();
 
+#if PATCH_BASED_MVP || PCC_ME_EXT
+  long long*    getBlockToPatch() const { return m_blockToPatch; }
+  Int*          getOccupancyMap() const { return m_occupancyMap; }
+#endif
+
 #if REDUCED_ENCODER_MEMORY
   Void          create( const TComSPS &sps, const TComPPS &pps, const Bool bCreateEncoderSourcePicYuv, const Bool bCreateForImmediateReconstruction );
   Void          prepareForEncoderSourcePicYuv();
@@ -205,4 +215,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPIC__
+
Index: source/Lib/TLibCommon/TComPicSym.cpp
===================================================================
--- source/Lib/TLibCommon/TComPicSym.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComPicSym.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "TComPicSym.h"
 #include "TComSampleAdaptiveOffset.h"
 #include "TComSlice.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -622,3 +623,6 @@
 #endif
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComPicSym.h
===================================================================
--- source/Lib/TLibCommon/TComPicSym.h	(revision 4998)
+++ source/Lib/TLibCommon/TComPicSym.h	(working copy)
@@ -44,6 +44,7 @@
 #include "CommonDef.h"
 #include "TComSlice.h"
 #include "TComDataCU.h"
+namespace pcc_hm {
 class TComSampleAdaptiveOffset;
 class TComPPS;
 
@@ -212,5 +213,7 @@
 Void getTilePosition(const TComDataCU* const pcCU, UInt &tileXPosInCtus, UInt &tileYPosInCtus, UInt &tileWidthtInCtus, UInt &tileHeightInCtus);
 #endif
 
+} // namespace pcc_hm
 #endif // __TCOMPICSYM__
 
+
Index: source/Lib/TLibCommon/TComPicYuv.cpp
===================================================================
--- source/Lib/TLibCommon/TComPicYuv.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComPicYuv.cpp	(working copy)
@@ -47,6 +47,7 @@
 
 #include "TComPicYuv.h"
 #include "TLibVideoIO/TVideoIOYuv.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -410,3 +411,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComPicYuv.h
===================================================================
--- source/Lib/TLibCommon/TComPicYuv.h	(revision 4998)
+++ source/Lib/TLibCommon/TComPicYuv.h	(working copy)
@@ -43,6 +43,7 @@
 #include "TComRom.h"
 #include "TComChromaFormat.h"
 #include "SEI.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -116,7 +117,7 @@
   Int           getWidth          (const ComponentID id) const { return  m_picWidth >> getComponentScaleX(id);   }
   Int           getHeight         (const ComponentID id) const { return  m_picHeight >> getComponentScaleY(id);  }
   ChromaFormat  getChromaFormat   ()                     const { return m_chromaFormatIDC; }
-  UInt          getNumberValidComponents() const { return ::getNumberValidComponents(m_chromaFormatIDC); }
+  UInt          getNumberValidComponents() const { return pcc_hm::getNumberValidComponents(m_chromaFormatIDC); }
 
   Int           getStride         (const ComponentID id) const { return ((m_picWidth     ) + (m_marginX  <<1)) >> getComponentScaleX(id); }
 private:
@@ -147,11 +148,11 @@
   const Pel*    getAddr           (const ComponentID ch, const Int ctuRSAddr, const Int uiAbsZorderIdx ) const
                                      { return m_piPicOrg[ch] + m_ctuOffsetInBuffer[ch==0?0:1][ctuRSAddr] + m_subCuOffsetInBuffer[ch==0?0:1][g_auiZscanToRaster[uiAbsZorderIdx]]; }
 
-  UInt          getComponentScaleX(const ComponentID id) const { return ::getComponentScaleX(id, m_chromaFormatIDC); }
-  UInt          getComponentScaleY(const ComponentID id) const { return ::getComponentScaleY(id, m_chromaFormatIDC); }
+  UInt          getComponentScaleX(const ComponentID id) const { return pcc_hm::getComponentScaleX(id, m_chromaFormatIDC); }
+  UInt          getComponentScaleY(const ComponentID id) const { return pcc_hm::getComponentScaleY(id, m_chromaFormatIDC); }
 
-  UInt          getChannelTypeScaleX(const ChannelType id) const { return ::getChannelTypeScaleX(id, m_chromaFormatIDC); }
-  UInt          getChannelTypeScaleY(const ChannelType id) const { return ::getChannelTypeScaleY(id, m_chromaFormatIDC); }
+  UInt          getChannelTypeScaleX(const ChannelType id) const { return pcc_hm::getChannelTypeScaleX(id, m_chromaFormatIDC); }
+  UInt          getChannelTypeScaleY(const ChannelType id) const { return pcc_hm::getChannelTypeScaleY(id, m_chromaFormatIDC); }
 
   // ------------------------------------------------------------------------------------------------
   //  Miscellaneous
@@ -183,4 +184,6 @@
 std::string hashToString(const TComPictureHash &digest, Int numChar);
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPICYUV__
+
Index: source/Lib/TLibCommon/TComPicYuvMD5.cpp
===================================================================
--- source/Lib/TLibCommon/TComPicYuvMD5.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComPicYuvMD5.cpp	(working copy)
@@ -33,6 +33,7 @@
 
 #include "TComPicYuv.h"
 #include "libmd5/MD5.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -225,3 +226,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComPrediction.cpp
===================================================================
--- source/Lib/TLibCommon/TComPrediction.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComPrediction.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include "TComPrediction.h"
 #include "TComPic.h"
 #include "TComTU.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -1096,3 +1097,6 @@
 
 #endif
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComPrediction.h
===================================================================
--- source/Lib/TLibCommon/TComPrediction.h	(revision 4998)
+++ source/Lib/TLibCommon/TComPrediction.h	(working copy)
@@ -43,6 +43,7 @@
 #include "TComYuv.h"
 #include "TComInterpolationFilter.h"
 #include "TComWeightPrediction.h"
+namespace pcc_hm {
 
 // forward declaration
 class TComMv;
@@ -157,4 +158,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMPREDICTION__
+
Index: source/Lib/TLibCommon/TComRdCost.cpp
===================================================================
--- source/Lib/TLibCommon/TComRdCost.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComRdCost.cpp	(working copy)
@@ -45,6 +45,7 @@
 #include <emmintrin.h>
 #include <xmmintrin.h>
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -1836,3 +1837,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComRdCost.h
===================================================================
--- source/Lib/TLibCommon/TComRdCost.h	(revision 4998)
+++ source/Lib/TLibCommon/TComRdCost.h	(working copy)
@@ -45,6 +45,7 @@
 
 #include "TComSlice.h"
 #include "TComRdCostWeightPrediction.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -138,6 +139,9 @@
   Double calcRdCost( Double numBits, Double distortion, DFunc eDFunc = DF_DEFAULT );
 
   Void    setDistortionWeight  ( const ComponentID compID, const Double distortionWeight ) { m_distortionWeight[compID] = distortionWeight; }
+#if PCC_ME_EXT
+  Double  getDistortionWeight(const ComponentID compID) { return m_distortionWeight[compID]; }
+#endif
   Void    setLambda      ( Double dLambda, const BitDepths &bitDepths );
   Void    setFrameLambda ( Double dLambda ) { m_dFrameLambda = dLambda; }
 
@@ -279,4 +283,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMRDCOST__
+
Index: source/Lib/TLibCommon/TComRdCostWeightPrediction.cpp
===================================================================
--- source/Lib/TLibCommon/TComRdCostWeightPrediction.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComRdCostWeightPrediction.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include <assert.h>
 #include "TComRdCost.h"
 #include "TComRdCostWeightPrediction.h"
+namespace pcc_hm {
 
 static Distortion xCalcHADs2x2w( const WPScalingParam &wpCur, const Pel *piOrg, const Pel *piCurr, Int iStrideOrg, Int iStrideCur, Int iStep );
 static Distortion xCalcHADs4x4w( const WPScalingParam &wpCur, const Pel *piOrg, const Pel *piCurr, Int iStrideOrg, Int iStrideCur, Int iStep );
@@ -599,3 +600,6 @@
 
   return uiSum >> DISTORTION_PRECISION_ADJUSTMENT(pcDtParam->bitDepth-8);
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComRdCostWeightPrediction.h
===================================================================
--- source/Lib/TLibCommon/TComRdCostWeightPrediction.h	(revision 4998)
+++ source/Lib/TLibCommon/TComRdCostWeightPrediction.h	(working copy)
@@ -40,6 +40,7 @@
 
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 class DistParam;
 class TComPattern;
@@ -56,5 +57,7 @@
   Distortion xGetHADsw( DistParam* pcDtParam );
 }// END NAMESPACE DEFINITION TComRdCostWeightPrediction
 
+} // namespace pcc_hm
 #endif // __TCOMRDCOSTWEIGHTPREDICTION__
 
+
Index: source/Lib/TLibCommon/TComRectangle.h
===================================================================
--- source/Lib/TLibCommon/TComRectangle.h	(revision 4998)
+++ source/Lib/TLibCommon/TComRectangle.h	(working copy)
@@ -34,6 +34,7 @@
 
 #ifndef __TCOMRECTANGLE__
 #define __TCOMRECTANGLE__
+namespace pcc_hm {
 
 
 struct TComRectangle
@@ -47,4 +48,6 @@
 
 
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComRom.cpp
===================================================================
--- source/Lib/TLibCommon/TComRom.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComRom.cpp	(working copy)
@@ -43,6 +43,7 @@
 #include <assert.h>
 #include "TComDataCU.h"
 #include "Debug.h"
+namespace pcc_hm {
 // ====================================================================================================================
 // Initialize / destroy functions
 // ====================================================================================================================
@@ -760,4 +761,16 @@
 const UInt g_scalingListSize   [SCALING_LIST_SIZE_NUM] = {16,64,256,1024};
 const UInt g_scalingListSizeX  [SCALING_LIST_SIZE_NUM] = { 4, 8, 16,  32};
 
+#if PCC_ME_EXT
+long long g_numPatches[PCC_ME_EXT_MAX_NUM_FRAMES];
+long long g_projectionIndex[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES];
+long long g_patch2DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][4];  // u0, v0, sizeU0, sizeV0
+long long g_patch3DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][3];  // d1, u1, v1
+
+Bool g_patchesChange[PCC_ME_EXT_MAX_NUM_PATCHES];
+#endif
+
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComRom.h
===================================================================
--- source/Lib/TLibCommon/TComRom.h	(revision 4998)
+++ source/Lib/TLibCommon/TComRom.h	(working copy)
@@ -42,6 +42,7 @@
 
 #include<stdio.h>
 #include<iostream>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -174,7 +175,18 @@
 
 extern UChar g_ucMsbP1Idx[256];
 extern UChar g_getMsbP1Idx(UInt uiVal);
+
+#if PATCH_BASED_MVP || PCC_ME_EXT
+extern long long g_numPatches[PCC_ME_EXT_MAX_NUM_FRAMES];
+extern long long g_projectionIndex[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES];
+extern long long g_patch2DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][4];  // u0, v0, sizeU0, sizeV0
+extern long long g_patch3DInfo[PCC_ME_EXT_MAX_NUM_FRAMES][PCC_ME_EXT_MAX_NUM_PATCHES][3];  // d1, u1, v1
+extern Bool g_patchesChange[PCC_ME_EXT_MAX_NUM_PATCHES];
+#endif
+
 //! \}
 
+} // namespace pcc_hm
 #endif  //__TCOMROM__
 
+
Index: source/Lib/TLibCommon/TComSampleAdaptiveOffset.cpp
===================================================================
--- source/Lib/TLibCommon/TComSampleAdaptiveOffset.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComSampleAdaptiveOffset.cpp	(working copy)
@@ -40,6 +40,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <math.h>
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -745,3 +746,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComSampleAdaptiveOffset.h
===================================================================
--- source/Lib/TLibCommon/TComSampleAdaptiveOffset.h	(revision 4998)
+++ source/Lib/TLibCommon/TComSampleAdaptiveOffset.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "CommonDef.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -103,5 +104,7 @@
 };
 
 //! \}
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibCommon/TComSlice.cpp
===================================================================
--- source/Lib/TLibCommon/TComSlice.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComSlice.cpp	(working copy)
@@ -40,6 +40,7 @@
 #include "TComPic.h"
 #include "TLibEncoder/TEncSbac.h"
 #include "TLibDecoder/TDecSbac.h"
+namespace pcc_hm {
 
 
 //! \ingroup TLibCommon
@@ -2494,3 +2495,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComSlice.h
===================================================================
--- source/Lib/TLibCommon/TComSlice.h	(revision 4998)
+++ source/Lib/TLibCommon/TComSlice.h	(working copy)
@@ -45,6 +45,7 @@
 #include "TComRom.h"
 #include "TComList.h"
 #include "TComChromaFormat.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -1835,4 +1836,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMSLICE__
+
Index: source/Lib/TLibCommon/TComTU.cpp
===================================================================
--- source/Lib/TLibCommon/TComTU.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComTU.cpp	(working copy)
@@ -36,6 +36,7 @@
 #include "TComRom.h"
 #include "TComDataCU.h"
 #include "TComPic.h"
+namespace pcc_hm {
 
 //----------------------------------------------------------------------------------------------------------------------
 
@@ -261,3 +262,6 @@
 
   return selectedIndex;
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComTU.h
===================================================================
--- source/Lib/TLibCommon/TComTU.h	(revision 4998)
+++ source/Lib/TLibCommon/TComTU.h	(working copy)
@@ -39,6 +39,7 @@
 #include "CommonDef.h"
 #include "TComRectangle.h"
 #include "TComChromaFormat.h"
+namespace pcc_hm {
 
 class TComDataCU; // forward declaration
 
@@ -164,4 +165,6 @@
 
 //----------------------------------------------------------------------------------------------------------------------
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComTrQuant.cpp
===================================================================
--- source/Lib/TLibCommon/TComTrQuant.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComTrQuant.cpp	(working copy)
@@ -44,6 +44,7 @@
 #include "ContextTables.h"
 #include "TComTU.h"
 #include "Debug.h"
+namespace pcc_hm {
 
 typedef struct
 {
@@ -3630,3 +3631,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComTrQuant.h
===================================================================
--- source/Lib/TLibCommon/TComTrQuant.h	(revision 4998)
+++ source/Lib/TLibCommon/TComTrQuant.h	(working copy)
@@ -43,6 +43,7 @@
 #include "TComDataCU.h"
 #include "TComChromaFormat.h"
 #include "ContextTables.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -334,4 +335,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMTRQUANT__
+
Index: source/Lib/TLibCommon/TComWeightPrediction.cpp
===================================================================
--- source/Lib/TLibCommon/TComWeightPrediction.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComWeightPrediction.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "TComPic.h"
 #include "TComInterpolationFilter.h"
 #include "TComWeightPrediction.h"
+namespace pcc_hm {
 
 
 static inline Pel weightBidir( Int w0, Pel P0, Int w1, Pel P1, Int round, Int shift, Int offset, Int clipBD)
@@ -388,3 +389,6 @@
   }
   addWeightUni( pcYuvSrc, pcCU->getSlice()->getSPS()->getBitDepths(), uiPartAddr, iWidth, iHeight, pwp, pcYuvPred );
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComWeightPrediction.h
===================================================================
--- source/Lib/TLibCommon/TComWeightPrediction.h	(revision 4998)
+++ source/Lib/TLibCommon/TComWeightPrediction.h	(working copy)
@@ -39,6 +39,7 @@
 #define __TCOMWEIGHTPREDICTION__
 
 #include "CommonDef.h"
+namespace pcc_hm {
 
 // forward declarations
 class  TComDataCU;
@@ -99,4 +100,6 @@
                                       TComYuv              *pcYuvDst );
 };
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibCommon/TComYuv.cpp
===================================================================
--- source/Lib/TLibCommon/TComYuv.cpp	(revision 4998)
+++ source/Lib/TLibCommon/TComYuv.cpp	(working copy)
@@ -44,6 +44,7 @@
 #include "CommonDef.h"
 #include "TComYuv.h"
 #include "TComInterpolationFilter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -645,3 +646,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibCommon/TComYuv.h
===================================================================
--- source/Lib/TLibCommon/TComYuv.h	(revision 4998)
+++ source/Lib/TLibCommon/TComYuv.h	(working copy)
@@ -42,6 +42,7 @@
 #include "CommonDef.h"
 #include "TComPicYuv.h"
 #include "TComRectangle.h"
+namespace pcc_hm {
 
 //! \ingroup TLibCommon
 //! \{
@@ -200,13 +201,15 @@
   UInt         getHeight                  (const ComponentID id) const { return m_iHeight >> getComponentScaleY(id);  }
   UInt         getWidth                   (const ComponentID id) const { return m_iWidth >> getComponentScaleX(id);   }
   ChromaFormat getChromaFormat            ()                     const { return m_chromaFormatIDC; }
-  UInt         getNumberValidComponents   ()                     const { return ::getNumberValidComponents(m_chromaFormatIDC); }
-  UInt         getComponentScaleX         (const ComponentID id) const { return ::getComponentScaleX(id, m_chromaFormatIDC); }
-  UInt         getComponentScaleY         (const ComponentID id) const { return ::getComponentScaleY(id, m_chromaFormatIDC); }
+  UInt         getNumberValidComponents   ()                     const { return pcc_hm::getNumberValidComponents(m_chromaFormatIDC); }
+  UInt         getComponentScaleX         (const ComponentID id) const { return pcc_hm::getComponentScaleX(id, m_chromaFormatIDC); }
+  UInt         getComponentScaleY         (const ComponentID id) const { return pcc_hm::getComponentScaleY(id, m_chromaFormatIDC); }
   Void         convert          (const Bool extendedPrecision, const UInt pixX, const UInt pixY, const UInt width, Bool bForwardConversion, const BitDepths& bitDepths, Bool bLossless = false, TComYuv* pcYuvNoCorrResi= NULL);
   Void         DefaultConvertPix(const UInt pixX, const UInt pixY, const UInt width, const BitDepths& bitDepths);
 };// END CLASS DEFINITION TComYuv
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TCOMYUV__
+
Index: source/Lib/TLibCommon/TypeDef.h
===================================================================
--- source/Lib/TLibCommon/TypeDef.h	(revision 4998)
+++ source/Lib/TLibCommon/TypeDef.h	(working copy)
@@ -46,9 +46,20 @@
 #include <utility>
 #include <iostream>
 
+namespace pcc_hm {
+  
+
 //! \ingroup TLibCommon
 //! \{
 
+#define PCC_ME_EXT                                        1
+
+#if PCC_ME_EXT
+#define PCC_ME_EXT_MAX_NUM_FRAMES                         600
+#define PCC_ME_EXT_MAX_NUM_PATCHES                        1000
+#define PCC_ME_NUM_LAYERS_ACTIVE                          2
+#endif
+
 // ====================================================================================================================
 // Debugging
 // ====================================================================================================================
@@ -141,7 +152,7 @@
 
 // This can be enabled by the makefile
 #ifndef RExt__HIGH_BIT_DEPTH_SUPPORT
-#define RExt__HIGH_BIT_DEPTH_SUPPORT                      0 ///< 0 (default) use data type definitions for 8-10 bit video, 1 = use larger data types to allow for up to 16-bit video (originally developed as part of N0188)
+#define RExt__HIGH_BIT_DEPTH_SUPPORT                      1 ///< 0 (default) use data type definitions for 8-10 bit video, 1 = use larger data types to allow for up to 16-bit video (originally developed as part of N0188)
 #endif
 
 #if defined __SSE2__ || defined __AVX2__ || defined __AVX__ || defined _M_AMD64 || defined _M_X64
@@ -1112,6 +1123,8 @@
 #endif
 //! \}
 
+} // namespace pcc_hm
 #endif
 
 
+
Index: source/Lib/TLibDecoder/AnnexBread.cpp
===================================================================
--- source/Lib/TLibDecoder/AnnexBread.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/AnnexBread.cpp	(working copy)
@@ -44,6 +44,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 using namespace std;
 
@@ -196,4 +197,62 @@
   stats.m_numBytesInNALUnit = UInt(nalUnit.size());
   return eof;
 }
+
+#if SAMPLE_STREAM
+static Void
+_sampleStreamNALUnit(
+  InputByteStream& bs,
+  size_t unitSizePrecisionBytes,
+  vector<uint8_t>& nalUnit,
+  AnnexBStats& stats)
+{
+  //read the size
+  size_t auSize=0;
+  for(size_t i=0; i<unitSizePrecisionBytes; i++)
+    auSize = (auSize<<8) + bs.readByte();
+  
+#if RExt__DECODER_DEBUG_BIT_STATISTICS
+  statBits.bits+=32; statBits.count+=4;
+#endif
+  stats.m_numStartCodePrefixBytes += 0;
+
+#if RExt__DECODER_DEBUG_BIT_STATISTICS
+  TComCodingStatistics::SStat &bodyStats=TComCodingStatistics::GetStatisticEP(STATS__NAL_UNIT_TOTAL_BODY);
+#endif
+
+  for(size_t nalubyte=0; nalubyte<auSize; nalubyte++)
+  {
+#if RExt__DECODER_DEBUG_BIT_STATISTICS
+    uint8_t thebyte=bs.readByte();bodyStats.bits+=8;bodyStats.count++;
+    nalUnit.push_back(thebyte);
+#else
+    nalUnit.push_back(bs.readByte());
+#endif
+  }
+  
+}
+
+Bool
+sampleStreamNALUnit(
+  InputByteStream& bs,
+  size_t unitSizePrecisionBytes,
+  vector<uint8_t>& nalUnit,
+  AnnexBStats& stats)
+{
+  Bool eof = false;
+  try
+  {
+    _sampleStreamNALUnit(bs, unitSizePrecisionBytes, nalUnit, stats);
+  }
+  catch (...)
+  {
+    eof = true;
+  }
+  stats.m_numBytesInNALUnit = UInt(nalUnit.size());
+  return eof;
+}
+#endif
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/AnnexBread.h
===================================================================
--- source/Lib/TLibDecoder/AnnexBread.h	(revision 4998)
+++ source/Lib/TLibDecoder/AnnexBread.h	(working copy)
@@ -46,6 +46,7 @@
 #include <vector>
 
 #include "TLibCommon/CommonDef.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -194,6 +195,12 @@
 
 Bool byteStreamNALUnit(InputByteStream& bs, std::vector<uint8_t>& nalUnit, AnnexBStats& stats);
 
+#if SAMPLE_STREAM
+Bool sampleStreamNALUnit(InputByteStream& bs, size_t unitSizePrecisionBytes, std::vector<uint8_t>& nalUnit, AnnexBStats& stats);
+#endif
+
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibDecoder/NALread.cpp
===================================================================
--- source/Lib/TLibDecoder/NALread.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/NALread.cpp	(working copy)
@@ -50,6 +50,7 @@
 #if ENC_DEC_TRACE && DEC_NUH_TRACE
 #include "TLibCommon/TComRom.h"
 #endif
+namespace pcc_hm {
 
 using namespace std;
 
@@ -182,3 +183,6 @@
   readNalUnitHeader(nalu);
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/NALread.h
===================================================================
--- source/Lib/TLibDecoder/NALread.h	(revision 4998)
+++ source/Lib/TLibDecoder/NALread.h	(working copy)
@@ -44,6 +44,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComBitStream.h"
 #include "TLibCommon/NAL.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -70,4 +71,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibDecoder/SEIread.cpp
===================================================================
--- source/Lib/TLibDecoder/SEIread.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/SEIread.cpp	(working copy)
@@ -44,6 +44,7 @@
 #include "SEIread.h"
 #include "TLibCommon/TComPicYuv.h"
 #include <iomanip>
+namespace pcc_hm {
 
 
 //! \ingroup TLibDecoder
@@ -1907,3 +1908,6 @@
 
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/SEIread.h
===================================================================
--- source/Lib/TLibDecoder/SEIread.h	(revision 4998)
+++ source/Lib/TLibDecoder/SEIread.h	(working copy)
@@ -47,6 +47,7 @@
 //! \{
 
 #include "TLibCommon/SEI.h"
+namespace pcc_hm {
 class TComInputBitstream;
 
 
@@ -129,4 +130,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibDecoder/SyntaxElementParser.cpp
===================================================================
--- source/Lib/TLibDecoder/SyntaxElementParser.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/SyntaxElementParser.cpp	(working copy)
@@ -45,6 +45,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 #if ENC_DEC_TRACE
 
@@ -314,3 +315,6 @@
 
 //! \}
 
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/SyntaxElementParser.h
===================================================================
--- source/Lib/TLibDecoder/SyntaxElementParser.h	(revision 4998)
+++ source/Lib/TLibDecoder/SyntaxElementParser.h	(working copy)
@@ -44,6 +44,7 @@
 
 #include "TLibCommon/TComRom.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 #if DECODER_PARTIAL_CONFORMANCE_CHECK!=0
 #define READ_SCODE_CHK(length, code, name, minValIncl, maxValIncl) xReadSCodeChk ( length, code, name, minValIncl, maxValIncl )
@@ -147,5 +148,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(__SYNTAXELEMENTPARSER__)
 
+
Index: source/Lib/TLibDecoder/TDecBinCoder.h
===================================================================
--- source/Lib/TLibDecoder/TDecBinCoder.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecBinCoder.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/ContextModel.h"
 #include "TLibCommon/TComBitStream.h"
+namespace pcc_hm {
 
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 class TComCodingStatisticsClassType;
@@ -83,4 +84,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp	(working copy)
@@ -40,6 +40,7 @@
 #if RExt__DECODER_DEBUG_BIT_STATISTICS
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -381,3 +382,6 @@
 #endif
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecBinCoderCABAC.h
===================================================================
--- source/Lib/TLibDecoder/TDecBinCoderCABAC.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecBinCoderCABAC.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/TComCABACTables.h"
 #include "TDecBinCoder.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -87,5 +88,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibDecoder/TDecCAVLC.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecCAVLC.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecCAVLC.cpp	(working copy)
@@ -43,6 +43,7 @@
 #include "TLibCommon/TComCodingStatistics.h"
 #endif
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -2410,3 +2411,6 @@
 
 //! \}
 
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecCAVLC.h
===================================================================
--- source/Lib/TLibDecoder/TDecCAVLC.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecCAVLC.h	(working copy)
@@ -44,6 +44,7 @@
 
 #include "TDecEntropy.h"
 #include "SyntaxElementParser.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -128,4 +129,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TDECCAVLC_H__9732DD64_59B0_4A41_B29E_1A5B18821EAD__INCLUDED_)
+
Index: source/Lib/TLibDecoder/TDecConformance.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecConformance.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecConformance.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "TLibCommon/TComPicSym.h"
 #include "NALread.h"
 #include <math.h>
+namespace pcc_hm {
 
 UInt
 LevelTierFeatures::getMaxPicWidthInLumaSamples()  const
@@ -450,3 +451,6 @@
 }
 
 #endif
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecConformance.h
===================================================================
--- source/Lib/TLibDecoder/TDecConformance.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecConformance.h	(working copy)
@@ -55,6 +55,7 @@
 #if DECODER_PARTIAL_CONFORMANCE_CHECK == 2
 #include <stdlib.h>
 #endif
+namespace pcc_hm {
 
 
 // Forward declarations
@@ -261,4 +262,6 @@
 };
 
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibDecoder/TDecCu.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecCu.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecCu.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "TDecCu.h"
 #include "TLibCommon/TComTU.h"
 #include "TLibCommon/TComPrediction.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -740,7 +741,7 @@
     for (UInt chType=CHANNEL_TYPE_LUMA; chType<numChType; chType++)
     {
       const ChannelType chanType=ChannelType(chType);
-      const Bool NxNPUHas4Parts = ::isChroma(chanType) ? enable4ChromaPUsInIntraNxNCU(pcCU->getPic()->getChromaFormat()) : true;
+      const Bool NxNPUHas4Parts = pcc_hm::isChroma(chanType) ? enable4ChromaPUsInIntraNxNCU(pcCU->getPic()->getChromaFormat()) : true;
       const UInt uiInitTrDepth = ( pcCU->getPartitionSize(0) != SIZE_2Nx2N && NxNPUHas4Parts ? 1 : 0 );
 
       TComTURecurse tuRecurseCU(pcCU, 0);
@@ -1181,3 +1182,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecCu.h
===================================================================
--- source/Lib/TLibDecoder/TDecCu.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecCu.h	(working copy)
@@ -45,6 +45,7 @@
 #include "TLibCommon/TComTrQuant.h"
 #include "TDecEntropy.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -130,5 +131,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibDecoder/TDecEntropy.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecEntropy.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecEntropy.cpp	(working copy)
@@ -39,6 +39,8 @@
 #include "TLibCommon/TComTU.h"
 #include "TLibCommon/TComPrediction.h"
 
+namespace pcc_hm {
+  
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 static const Bool bDebugRQT = DebugOptionList::DebugRQT.getInt()!=0;
@@ -742,3 +744,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecEntropy.h
===================================================================
--- source/Lib/TLibDecoder/TDecEntropy.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecEntropy.h	(working copy)
@@ -45,6 +45,7 @@
 #include "TLibCommon/TComSampleAdaptiveOffset.h"
 #include "TLibCommon/TComRectangle.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 class TDecSbac;
 class TDecCavlc;
@@ -189,5 +190,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TDECENTROPY__
 
+
Index: source/Lib/TLibDecoder/TDecGop.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecGop.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecGop.cpp	(working copy)
@@ -44,6 +44,7 @@
 #include "TLibCommon/SEI.h"
 
 #include <time.h>
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -265,3 +266,6 @@
   }
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecGop.h
===================================================================
--- source/Lib/TLibDecoder/TDecGop.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecGop.h	(working copy)
@@ -54,6 +54,7 @@
 #include "TDecSlice.h"
 #include "TDecBinCoder.h"
 #include "TDecBinCoderCABAC.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -105,5 +106,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TDECGOP_H__29440B7A_7CC0_48C7_8DD5_1A531D3CED45__INCLUDED_)
 
+
Index: source/Lib/TLibDecoder/TDecSbac.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecSbac.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecSbac.cpp	(working copy)
@@ -53,6 +53,7 @@
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 #endif
+namespace pcc_hm {
 
 
 //////////////////////////////////////////////////////////////////////
@@ -2549,3 +2550,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecSbac.h
===================================================================
--- source/Lib/TLibDecoder/TDecSbac.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecSbac.h	(working copy)
@@ -49,6 +49,7 @@
 #include "TLibCommon/ContextTables.h"
 #include "TLibCommon/ContextModel.h"
 #include "TLibCommon/ContextModel3DBuffer.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -217,4 +218,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TDECSBAC_H__CFCAAA19_8110_47F4_9A16_810C4B5499D5__INCLUDED_)
+
Index: source/Lib/TLibDecoder/TDecSlice.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecSlice.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecSlice.cpp	(working copy)
@@ -37,6 +37,7 @@
 
 #include "TDecSlice.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -403,3 +404,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecSlice.h
===================================================================
--- source/Lib/TLibDecoder/TDecSlice.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecSlice.h	(working copy)
@@ -49,6 +49,7 @@
 #include "TDecCu.h"
 #include "TDecSbac.h"
 #include "TDecBinCoderCABAC.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -90,5 +91,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibDecoder/TDecTop.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecTop.cpp	(revision 4998)
+++ source/Lib/TLibDecoder/TDecTop.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "NALread.h"
 #include "TDecTop.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 //! \ingroup TLibDecoder
 //! \{
@@ -1188,3 +1189,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibDecoder/TDecTop.h
===================================================================
--- source/Lib/TLibDecoder/TDecTop.h	(revision 4998)
+++ source/Lib/TLibDecoder/TDecTop.h	(working copy)
@@ -52,6 +52,7 @@
 #include "TDecCAVLC.h"
 #include "SEIread.h"
 #include "TDecConformance.h"
+namespace pcc_hm {
 
 class InputNALUnit;
 
@@ -203,5 +204,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TDECTOP__
 
+
Index: source/Lib/TLibEncoder/AnnexBwrite.h
===================================================================
--- source/Lib/TLibEncoder/AnnexBwrite.h	(revision 4998)
+++ source/Lib/TLibEncoder/AnnexBwrite.h	(working copy)
@@ -39,6 +39,7 @@
 #include <ostream>
 #include "TLibCommon/AccessUnit.h"
 #include "NALwrite.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -86,6 +87,31 @@
 
   return annexBsizes;
 }
+
+#if SAMPLE_STREAM
+static std::vector<UInt> writeSampleStream(std::ostream& out, UInt precisionBytes, const AccessUnit& au)
+{
+  std::vector<UInt> sampleStreamsizes;
+
+  for (AccessUnit::const_iterator it = au.begin(); it != au.end(); it++)
+  {
+    const NALUnitEBSP& nalu = **it;
+    UInt size = 0;
+    
+    TComOutputBitstream bsNALUSize;
+    bsNALUSize.write(nalu.m_nalUnitData.str().size(), precisionBytes*8);
+    out.write(reinterpret_cast<const TChar*>(bsNALUSize.getByteStream()), bsNALUSize.getByteStreamLength());
+    out << nalu.m_nalUnitData.str();
+    size += UInt(nalu.m_nalUnitData.str().size());
+    sampleStreamsizes.push_back(size);
+  }
+
+  return sampleStreamsizes;
+}
+#endif
+
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibEncoder/NALwrite.cpp
===================================================================
--- source/Lib/TLibEncoder/NALwrite.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/NALwrite.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "TLibCommon/NAL.h"
 #include "TLibCommon/TComBitStream.h"
 #include "NALwrite.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -123,3 +124,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/NALwrite.h
===================================================================
--- source/Lib/TLibEncoder/NALwrite.h	(revision 4998)
+++ source/Lib/TLibEncoder/NALwrite.h	(working copy)
@@ -41,6 +41,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComBitStream.h"
 #include "TLibCommon/NAL.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -84,4 +85,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibEncoder/SEIEncoder.cpp
===================================================================
--- source/Lib/TLibEncoder/SEIEncoder.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/SEIEncoder.cpp	(working copy)
@@ -35,6 +35,7 @@
 #include "TLibCommon/SEI.h"
 #include "TEncGOP.h"
 #include "TEncTop.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1318,3 +1319,6 @@
 
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/SEIEncoder.h
===================================================================
--- source/Lib/TLibEncoder/SEIEncoder.h	(revision 4998)
+++ source/Lib/TLibEncoder/SEIEncoder.h	(working copy)
@@ -37,6 +37,7 @@
 #define __SEIENCODER__
 
 #include "TLibCommon/SEI.h"
+namespace pcc_hm {
 
 // forward declarations
 class TEncCfg;
@@ -129,4 +130,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __SEIENCODER__
+
Index: source/Lib/TLibEncoder/SEIwrite.cpp
===================================================================
--- source/Lib/TLibEncoder/SEIwrite.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/SEIwrite.cpp	(working copy)
@@ -37,6 +37,7 @@
 #include "TLibCommon/TComSlice.h"
 #include "TLibCommon/TComPicYuv.h"
 #include "SEIwrite.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1380,3 +1381,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/SEIwrite.h
===================================================================
--- source/Lib/TLibEncoder/SEIwrite.h	(revision 4998)
+++ source/Lib/TLibEncoder/SEIwrite.h	(working copy)
@@ -38,6 +38,7 @@
 
 #include "SyntaxElementWriter.h"
 #include "TLibCommon/SEI.h"
+namespace pcc_hm {
 
 class TComBitIf;
 
@@ -119,4 +120,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibEncoder/SyntaxElementWriter.cpp
===================================================================
--- source/Lib/TLibEncoder/SyntaxElementWriter.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/SyntaxElementWriter.cpp	(working copy)
@@ -37,6 +37,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include "SyntaxElementWriter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -174,3 +175,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/SyntaxElementWriter.h
===================================================================
--- source/Lib/TLibEncoder/SyntaxElementWriter.h	(revision 4998)
+++ source/Lib/TLibEncoder/SyntaxElementWriter.h	(working copy)
@@ -45,6 +45,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComBitStream.h"
 #include "TLibCommon/TComRom.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -96,5 +97,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(__SYNTAXELEMENTWRITER__)
 
+
Index: source/Lib/TLibEncoder/TEncAnalyze.h
===================================================================
--- source/Lib/TLibEncoder/TEncAnalyze.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncAnalyze.h	(working copy)
@@ -51,6 +51,7 @@
 #if EXTENSION_360_VIDEO
 #include "TAppEncHelper360/TExt360EncAnalyze.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -471,4 +472,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCANALYZE_H__C79BCAA2_6AC8_4175_A0FE_CF02F5829233__INCLUDED_)
+
Index: source/Lib/TLibEncoder/TEncBinCoder.h
===================================================================
--- source/Lib/TLibEncoder/TEncBinCoder.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncBinCoder.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/ContextModel.h"
 #include "TLibCommon/TComBitStream.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -82,5 +83,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "TEncBinCoderCABAC.h"
 #include "TLibCommon/TComRom.h"
 #include "TLibCommon/Debug.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -444,3 +445,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncBinCoderCABAC.h
===================================================================
--- source/Lib/TLibEncoder/TEncBinCoderCABAC.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncBinCoderCABAC.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/TComCABACTables.h"
 #include "TEncBinCoder.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -107,5 +108,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibEncoder/TEncBinCoderCABACCounter.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncBinCoderCABACCounter.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncBinCoderCABACCounter.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "TEncBinCoderCABACCounter.h"
 #include "TLibCommon/TComRom.h"
 #include "TLibCommon/Debug.h"
+namespace pcc_hm {
 
 
 #if FAST_BIT_EST
@@ -142,3 +143,6 @@
 //! \}
 #endif
 
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncBinCoderCABACCounter.h
===================================================================
--- source/Lib/TLibEncoder/TEncBinCoderCABACCounter.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncBinCoderCABACCounter.h	(working copy)
@@ -40,6 +40,7 @@
 
 
 #include "TEncBinCoderCABAC.h"
+namespace pcc_hm {
 
 #if FAST_BIT_EST
 
@@ -78,5 +79,7 @@
 
 #endif
 
+} // namespace pcc_hm
 #endif
 
+
Index: source/Lib/TLibEncoder/TEncCavlc.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncCavlc.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncCavlc.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "../TLibCommon/CommonDef.h"
 #include "TEncCavlc.h"
 #include "SEIwrite.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1691,3 +1692,6 @@
   assert(0);
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncCavlc.h
===================================================================
--- source/Lib/TLibEncoder/TEncCavlc.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncCavlc.h	(working copy)
@@ -47,6 +47,7 @@
 #include "TLibCommon/TComRom.h"
 #include "TEncEntropy.h"
 #include "SyntaxElementWriter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -149,5 +150,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCCAVLC_H__EE8A0B30_945B_4169_B290_24D3AD52296F__INCLUDED_)
 
+
Index: source/Lib/TLibEncoder/TEncCfg.h
===================================================================
--- source/Lib/TLibEncoder/TEncCfg.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncCfg.h	(working copy)
@@ -45,6 +45,7 @@
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComSlice.h"
 #include <assert.h>
+namespace pcc_hm {
 
 struct GOPEntry
 {
@@ -131,6 +132,12 @@
 };
 
 protected:
+#if PCC_ME_EXT
+	std::string m_blockToPatchFileName;
+	std::string m_occupancyFileName;
+	Bool        m_usePCCExt;
+	//std::string m_patchInfoFileName;
+#endif
   //==== File I/O ========
   Int       m_iFrameRate;
   Int       m_FrameSkip;
@@ -559,6 +566,17 @@
   virtual ~TEncCfg()
   {}
 
+#if PCC_ME_EXT
+  Void setBlockToPatchFileName(std::string blockToPatchFileName) { m_blockToPatchFileName = blockToPatchFileName; }
+  std::string getBlockToPatchFileName() { return m_blockToPatchFileName; }
+
+  Void setOccupancyMapFileName(std::string occupancyMapFileName) { m_occupancyFileName = occupancyMapFileName; }
+  std::string getOccupancyMapFileName() { return m_occupancyFileName; }
+
+  Void setUsePCCExt(Bool value) { m_usePCCExt = value; }
+  Bool getUsePCCExt()         const { return m_usePCCExt; }
+#endif
+
   Void setProfile(Profile::Name profile) { m_profile = profile; }
   Void setLevel(Level::Tier tier, Level::Name level) { m_levelTier = tier; m_level = level; }
 
@@ -1370,4 +1388,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCCFG_H__6B99B797_F4DA_4E46_8E78_7656339A6C41__INCLUDED_)
+
Index: source/Lib/TLibEncoder/TEncCu.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncCu.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncCu.cpp	(working copy)
@@ -43,6 +43,7 @@
 
 #include <cmath>
 #include <algorithm>
+namespace pcc_hm {
 using namespace std;
 
 
@@ -3464,3 +3465,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncCu.h
===================================================================
--- source/Lib/TLibEncoder/TEncCu.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncCu.h	(working copy)
@@ -49,6 +49,7 @@
 #include "TEncEntropy.h"
 #include "TEncSearch.h"
 #include "TEncRateCtrl.h"
+namespace pcc_hm {
 //! \ingroup TLibEncoder
 //! \{
 
@@ -230,4 +231,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCMB__
+
Index: source/Lib/TLibEncoder/TEncEntropy.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncEntropy.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncEntropy.cpp	(working copy)
@@ -40,6 +40,8 @@
 #include "TLibCommon/TComSampleAdaptiveOffset.h"
 #include "TLibCommon/TComTU.h"
 
+namespace pcc_hm {
+  
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 static const Bool bDebugPredEnabled = DebugOptionList::DebugPred.getInt()!=0;
@@ -734,3 +736,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncEntropy.h
===================================================================
--- source/Lib/TLibEncoder/TEncEntropy.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncEntropy.h	(working copy)
@@ -46,6 +46,7 @@
 #include "TLibCommon/TComTrQuant.h"
 #include "TLibCommon/TComSampleAdaptiveOffset.h"
 #include "TLibCommon/TComChromaFormat.h"
+namespace pcc_hm {
 
 class TEncSbac;
 class TEncCavlc;
@@ -187,5 +188,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCENTROPY__
 
+
Index: source/Lib/TLibEncoder/TEncGOP.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncGOP.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncGOP.cpp	(working copy)
@@ -51,6 +51,7 @@
 #include <math.h>
 
 #include <deque>
+namespace pcc_hm {
 using namespace std;
 
 //! \ingroup TLibEncoder
@@ -1197,7 +1198,11 @@
 // ====================================================================================================================
 Void TEncGOP::compressGOP( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rcListPic,
                            TComList<TComPicYuv*>& rcListPicYuvRecOut, std::list<AccessUnit>& accessUnitsInGOP,
+#if PCC_ME_EXT
+	                       Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool usePccME)
+#else
                            Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl )
+#endif
 {
   // TODO: Split this function up.
 
@@ -1757,6 +1762,52 @@
       for(UInt nextCtuTsAddr = 0; nextCtuTsAddr < numberOfCtusInFrame; )
       {
         m_pcSliceEncoder->precompressSlice( pcPic );
+#if PCC_ME_EXT
+		if (pcSlice->getPOC() % PCC_ME_NUM_LAYERS_ACTIVE == 0 && usePccME)
+		{
+			//printf("\nPCC ME ACTIVE\n");
+			Int picWidth = pcPic->getPicYuvRec()->getWidth(COMPONENT_Y);
+			Int picHeight = pcPic->getPicYuvRec()->getHeight(COMPONENT_Y);
+
+			Int blockToPatchWidth = picWidth / 16;
+			Int blockToPatchHeight = picHeight / 16;
+
+			Int currPOC = pcSlice->getPOC() / PCC_ME_NUM_LAYERS_ACTIVE;
+			long long offset = (long long)currPOC * blockToPatchWidth * blockToPatchHeight;
+
+			std::string blockToPatchFileName = m_pcEncTop->getBlockToPatchFileName();
+			FILE* blockToPatchFile = NULL;
+			blockToPatchFile = fopen(blockToPatchFileName.c_str(), "rb");
+			fseek(blockToPatchFile, offset * sizeof(long long), SEEK_SET);
+			long long* blockToPatch = pcPic->getBlockToPatch();
+			size_t readSize = fread(blockToPatch, sizeof(long long), blockToPatchWidth * blockToPatchHeight, blockToPatchFile);
+			if (readSize != blockToPatchWidth * blockToPatchHeight)
+			{
+				printf("error: Resolution does not match");
+			}
+			fclose(blockToPatchFile);
+
+			offset = (long long)currPOC * picWidth * picHeight;
+			std::string occupancyMapFileName = m_pcEncTop->getOccupancyMapFileName();
+			FILE* occupancyMapFile = NULL;
+			occupancyMapFile = fopen(occupancyMapFileName.c_str(), "rb");
+			fseek(occupancyMapFile, offset * sizeof(Int), SEEK_SET);
+			Int* occupancyMap = pcPic->getOccupancyMap();
+			readSize = fread(occupancyMap, sizeof(Int), picWidth * picHeight, occupancyMapFile);
+			if (readSize != picWidth * picHeight)
+			{
+				printf("error: Resolution does not match");
+			}
+			fclose(occupancyMapFile);
+		}
+		if (usePccME)
+		{
+			for (Int i = 0; i < PCC_ME_EXT_MAX_NUM_PATCHES; i++)
+			{
+				g_patchesChange[i] = true;
+			}
+		}
+#endif
         m_pcSliceEncoder->compressSlice   ( pcPic, false, false );
 
         const UInt curSliceSegmentEnd = pcSlice->getSliceSegmentCurEndCtuTsAddr();
@@ -3741,3 +3792,6 @@
   return m_pcEncTop->getSPS(id);
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncGOP.h
===================================================================
--- source/Lib/TLibEncoder/TEncGOP.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncGOP.h	(working copy)
@@ -61,6 +61,7 @@
 #include "TEncAnalyze.h"
 #include "TEncRateCtrl.h"
 #include <vector>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -168,7 +169,11 @@
 
   Void  init        ( TEncTop* pcTEncTop );
   Void  compressGOP ( Int iPOCLast, Int iNumPicRcvd, TComList<TComPic*>& rcListPic, TComList<TComPicYuv*>& rcListPicYuvRec,
+#if PCC_ME_EXT
+	                 std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl, Bool m_usePCCExt);
+#else
                      std::list<AccessUnit>& accessUnitsInGOP, Bool isField, Bool isTff, const InputColourSpaceConversion snr_conversion, const TEncAnalyze::OutputLogControl &outputLogCtrl );
+#endif
   Void  xAttachSliceDataToNalUnit (OutputNALUnit& rNalu, TComOutputBitstream* pcBitstreamRedirect);
 
 
@@ -257,5 +262,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCGOP__
 
+
Index: source/Lib/TLibEncoder/TEncPic.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncPic.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncPic.cpp	(working copy)
@@ -36,6 +36,7 @@
 */
 
 #include "TEncPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -157,3 +158,6 @@
 }
 //! \}
 
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncPic.h
===================================================================
--- source/Lib/TLibEncoder/TEncPic.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncPic.h	(working copy)
@@ -40,6 +40,7 @@
 
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -115,4 +116,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCPIC__
+
Index: source/Lib/TLibEncoder/TEncPreanalyzer.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncPreanalyzer.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncPreanalyzer.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include <algorithm>
 
 #include "TEncPreanalyzer.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -151,3 +152,6 @@
 }
 //! \}
 
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncPreanalyzer.h
===================================================================
--- source/Lib/TLibEncoder/TEncPreanalyzer.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncPreanalyzer.h	(working copy)
@@ -39,6 +39,7 @@
 #define __TENCPREANALYZER__
 
 #include "TEncPic.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -59,4 +60,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCPREANALYZER__
+
Index: source/Lib/TLibEncoder/TEncRateCtrl.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncRateCtrl.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncRateCtrl.cpp	(working copy)
@@ -39,6 +39,7 @@
 #include "../TLibCommon/TComChromaFormat.h"
 
 #include <cmath>
+namespace pcc_hm {
 
 using namespace std;
 
@@ -1471,3 +1472,6 @@
   delete m_encRCGOP;
   m_encRCGOP = NULL;
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncRateCtrl.h
===================================================================
--- source/Lib/TLibEncoder/TEncRateCtrl.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncRateCtrl.h	(working copy)
@@ -57,6 +57,7 @@
 #include "../TLibEncoder/TEncCfg.h"
 #include <list>
 #include <cassert>
+namespace pcc_hm {
 
 const Int g_RCInvalidQPValue = -999;
 const Int g_RCSmoothWindowSize = 40;
@@ -344,6 +345,8 @@
   UInt       m_bufferingRate;           // Buffering rate
 };
 
+} // namespace pcc_hm
 #endif
 
 
+
Index: source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp	(working copy)
@@ -40,6 +40,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <math.h>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1333,3 +1334,6 @@
 
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
===================================================================
--- source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h	(working copy)
@@ -45,6 +45,7 @@
 #include "TEncEntropy.h"
 #include "TEncSbac.h"
 #include "TLibCommon/TComBitCounter.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -151,4 +152,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif
+
Index: source/Lib/TLibEncoder/TEncSbac.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncSbac.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSbac.cpp	(working copy)
@@ -45,6 +45,7 @@
 #if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
 #include "../TLibCommon/Debug.h"
 #endif
+namespace pcc_hm {
 
 
 //! \ingroup TLibEncoder
@@ -2608,3 +2609,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncSbac.h
===================================================================
--- source/Lib/TLibEncoder/TEncSbac.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSbac.h	(working copy)
@@ -52,6 +52,7 @@
 #if FAST_BIT_EST
 #include "TEncBinCoderCABACCounter.h"
 #endif
+namespace pcc_hm {
 
 class TEncTop;
 
@@ -241,4 +242,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // !defined(AFX_TENCSBAC_H__DDA7CDC4_EDE3_4015_9D32_2156249C82AA__INCLUDED_)
+
Index: source/Lib/TLibEncoder/TEncSearch.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncSearch.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSearch.cpp	(working copy)
@@ -43,6 +43,7 @@
 #include "TLibCommon/Debug.h"
 #include <math.h>
 #include <limits>
+namespace pcc_hm {
 
 
 //! \ingroup TLibEncoder
@@ -405,8 +406,8 @@
   const UInt uiNumPartitions = 1<<(maxTotalCUDepth<<1);
   for (UInt ch=0; ch<MAX_NUM_COMPONENT; ch++)
   {
-    const UInt csx=::getComponentScaleX(ComponentID(ch), cform);
-    const UInt csy=::getComponentScaleY(ComponentID(ch), cform);
+    const UInt csx=pcc_hm::getComponentScaleX(ComponentID(ch), cform);
+    const UInt csy=pcc_hm::getComponentScaleY(ComponentID(ch), cform);
     m_ppcQTTempCoeff[ch] = new TCoeff* [uiNumLayersToAllocate];
 #if ADAPTIVE_QP_SELECTION
     m_ppcQTTempArlCoeff[ch]  = new TCoeff*[uiNumLayersToAllocate];
@@ -4080,8 +4081,15 @@
                         iRoiHeight,
                         pcYuv->getStride(COMPONENT_Y),
                         pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA),
+#if PCC_ME_EXT
                         roiPosX,
+                        roiPosY,
+                        iRefIdxPred,
+                        eRefPicList);
+#else
+                        roiPosX,
                         roiPosY);
+#endif
   xInitTileBorders(pcCU, &cPattern);
 #else
   cPattern.initPattern( pcYuv->getAddr  ( COMPONENT_Y, uiPartAddr ),
@@ -4397,6 +4405,105 @@
   // set rcMv (Median predictor) as start point and as best point
   xTZSearchHelp( pcPatternKey, cStruct, rcMv.getHor(), rcMv.getVer(), 0, 0 );
 
+#if PCC_ME_EXT
+  if (m_pcEncCfg->getUsePCCExt()) {
+    Int xCoor = pcPatternKey->getROIYPosX() + pcPatternKey->getROIYWidth() / PCC_ME_NUM_LAYERS_ACTIVE;
+    Int yCoor = pcPatternKey->getROIYPosY() + pcPatternKey->getROIYHeight() / PCC_ME_NUM_LAYERS_ACTIVE;
+  
+    Int picWidth = pcCU->getSlice()->getSPS()->getPicWidthInLumaSamples();
+    Int occupancyResolution = 16;
+    Int blockToPatchWidth = picWidth / occupancyResolution;
+  
+    Int* occupancyMap = pcCU->getPic()->getOccupancyMap();
+    long long* blockToPatch = pcCU->getPic()->getBlockToPatch();
+  
+    if (pcCU->getSlice()->getPOC() % 2 == 0 && occupancyMap[yCoor * picWidth + xCoor])
+    {
+  	  Int xBlockIndex = xCoor / occupancyResolution;
+  	  Int yBlockIndex = yCoor / occupancyResolution;
+  
+  	  Int patchIndex = blockToPatch[yBlockIndex * blockToPatchWidth + xBlockIndex] - 1;          // should be minus 1
+  	  Int frameIndex = pcCU->getSlice()->getPOC() / PCC_ME_NUM_LAYERS_ACTIVE;
+  
+  	  // current 3D coordinate derivation
+  	  Int projectIndex = g_projectionIndex[frameIndex][patchIndex];
+  
+  	  Int patchD1 = g_patch3DInfo[frameIndex][patchIndex][0];
+  	  Int patchU1 = g_patch3DInfo[frameIndex][patchIndex][1];
+  	  Int patchV1 = g_patch3DInfo[frameIndex][patchIndex][2];
+  
+  	  Int patchU0 = g_patch2DInfo[frameIndex][patchIndex][0];
+  	  Int patchV0 = g_patch2DInfo[frameIndex][patchIndex][1];
+  
+  	  Int xCoor3D = patchU1 + (xCoor - patchU0 * occupancyResolution);
+  	  Int yCoor3D = patchV1 + (yCoor - patchV0 * occupancyResolution);
+  
+  
+  	  RefPicList eRefPicList = pcPatternKey->getRefPicList();
+  	  Int refIdx = pcPatternKey->getRefIndex();
+  
+  	  // find the suitable patch in the reference frame
+  	  Int refPOC = pcCU->getSlice()->getRefPOC(eRefPicList, refIdx);
+  	  Int refFrameIndex = refPOC / 2;
+  	  Int refNumPatches = g_numPatches[refFrameIndex];
+  
+  	  Int bestPatchIndex = 0;
+  	  Int bestDist = MAX_INT;
+  	  for (Int refPatchIdx = 0; refPatchIdx < refNumPatches; refPatchIdx++)
+  	  {
+  	    Int refProjectionIndex = g_projectionIndex[refFrameIndex][refPatchIdx];
+  	  
+  	    if (refProjectionIndex != projectIndex)
+  	    {
+  	  	  continue;
+  	    }
+  	  
+  	    Int refPatchU1 = g_patch3DInfo[refFrameIndex][refPatchIdx][1];
+  	    Int refPatchV1 = g_patch3DInfo[refFrameIndex][refPatchIdx][2];
+  	  
+  	    Int refPatchSizeU0 = g_patch2DInfo[refFrameIndex][refPatchIdx][2];
+  	    Int refPatchSizeV0 = g_patch2DInfo[refFrameIndex][refPatchIdx][3];
+	  
+	    Int refPatch3DEndU1 = refPatchU1 + refPatchSizeU0 * occupancyResolution - 1;
+	    Int refPatch3DEndV1 = refPatchV1 + refPatchSizeV0 * occupancyResolution - 1;
+	  
+	    Bool xCond = (xCoor3D >= refPatchU1 && xCoor3D <= refPatch3DEndU1);
+	    Bool yCond = (yCoor3D >= refPatchV1 && yCoor3D <= refPatch3DEndV1);
+	  
+	    if (xCond && yCond)
+	    {
+	  	  Int refPatchD1 = g_patch3DInfo[refFrameIndex][refPatchIdx][0];
+	  	  Int patchDist = abs(patchD1 - refPatchD1);
+	  
+	  	  if (patchDist < bestDist)
+	  	  {
+	  	    bestDist = patchDist;
+	  	    bestPatchIndex = refPatchIdx;
+	  	  }
+	    }
+	  }
+
+	  Int diff3DU = g_patch3DInfo[frameIndex][patchIndex][1] - g_patch3DInfo[refFrameIndex][bestPatchIndex][1];
+	  Int diff3DV = g_patch3DInfo[frameIndex][patchIndex][2] - g_patch3DInfo[refFrameIndex][bestPatchIndex][2];
+
+	  Int diff2DU = (g_patch2DInfo[refFrameIndex][bestPatchIndex][0] - g_patch2DInfo[frameIndex][patchIndex][0]) * occupancyResolution;
+	  Int diff2DV = (g_patch2DInfo[refFrameIndex][bestPatchIndex][1] - g_patch2DInfo[frameIndex][patchIndex][1]) * occupancyResolution;
+
+	  Int diffTotalU = diff3DU + diff2DU;
+	  Int diffTotalV = diff3DV + diff2DV;
+
+	  TComMv startMV(diffTotalU << 2, diffTotalV << 2);
+	  pcCU->clipMv(startMV);
+#if ME_ENABLE_ROUNDING_OF_MVS
+	  startMV.divideByPowerOf2(2);
+#else
+	  startMV >>= 2;
+#endif
+	  xTZSearchHelp(pcPatternKey, cStruct, startMV.getHor(), startMV.getVer(), 0, 0);
+	}
+  }
+#endif
+
   // test whether one of PRED_A, PRED_B, PRED_C MV is better start point than Median predictor
   if ( bTestOtherPredictedMV )
   {
@@ -15001,3 +15108,6 @@
 }
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncSearch.h
===================================================================
--- source/Lib/TLibEncoder/TEncSearch.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSearch.h	(working copy)
@@ -50,6 +50,7 @@
 #include "TEncSbac.h"
 #include "TEncCfg.h"
 #include "TLibCommon/TComHash.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -841,4 +842,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCSEARCH__
+
Index: source/Lib/TLibEncoder/TEncSlice.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncSlice.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSlice.cpp	(working copy)
@@ -38,6 +38,7 @@
 #include "TEncTop.h"
 #include "TEncSlice.h"
 #include <math.h>
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -1837,3 +1838,6 @@
   }
 }
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncSlice.h
===================================================================
--- source/Lib/TLibEncoder/TEncSlice.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncSlice.h	(working copy)
@@ -46,6 +46,7 @@
 #include "TEncCu.h"
 #include "WeightPredAnalysis.h"
 #include "TEncRateCtrl.h"
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -152,4 +153,6 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCSLICE__
+
Index: source/Lib/TLibEncoder/TEncTop.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncTop.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/TEncTop.cpp	(working copy)
@@ -42,6 +42,7 @@
 #if FAST_BIT_EST
 #include "TLibCommon/ContextModel.h"
 #endif
+namespace pcc_hm {
 
 //! \ingroup TLibEncoder
 //! \{
@@ -362,7 +363,12 @@
   }
 
   // compress GOP
+#if PCC_ME_EXT
+  if (m_usePCCExt) printf("\n\tPCC ME GOP #1 ACTIVE\n");
+  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl(), m_usePCCExt);
+#else
   m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl());
+#endif
 
   if ( m_RCEnableRateControl )
   {
@@ -466,7 +472,12 @@
     if ( m_iNumPicRcvd && ((flush&&fieldNum==1) || (m_iPOCLast/2)==0 || m_iNumPicRcvd==m_iGOPSize ) )
     {
       // compress GOP
+#if PCC_ME_EXT
+      if (m_usePCCExt) printf("\n\tPCC ME GOP #2 ACTIVE\n");
+	  m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, false, false, snrCSC, getOutputLogControl(), m_usePCCExt);
+#else
       m_cGOPEncoder.compressGOP(m_iPOCLast, m_iNumPicRcvd, m_cListPic, rcListPicYuvRecOut, accessUnitsOut, true, isTff, snrCSC, getOutputLogControl());
+#endif
       iNumEncoded += m_iNumPicRcvd;
       m_uiNumAllPicCoded += m_iNumPicRcvd;
       m_iNumPicRcvd = 0;
@@ -1491,3 +1502,6 @@
 #endif
 
 //! \}
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/TEncTop.h
===================================================================
--- source/Lib/TLibEncoder/TEncTop.h	(revision 4998)
+++ source/Lib/TLibEncoder/TEncTop.h	(working copy)
@@ -57,6 +57,7 @@
 #include "TEncSampleAdaptiveOffset.h"
 #include "TEncPreanalyzer.h"
 #include "TEncRateCtrl.h"
+namespace pcc_hm {
 //! \ingroup TLibEncoder
 //! \{
 
@@ -207,5 +208,7 @@
 
 //! \}
 
+} // namespace pcc_hm
 #endif // __TENCTOP__
 
+
Index: source/Lib/TLibEncoder/WeightPredAnalysis.cpp
===================================================================
--- source/Lib/TLibEncoder/WeightPredAnalysis.cpp	(revision 4998)
+++ source/Lib/TLibEncoder/WeightPredAnalysis.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "../TLibCommon/TComPicYuv.h"
 #include "WeightPredAnalysis.h"
 #include <limits>
+namespace pcc_hm {
 
 static const Double WEIGHT_PRED_SAD_RELATIVE_TO_NON_WEIGHT_PRED_SAD=0.99; // NOTE: U0040 used 0.95
 
@@ -744,3 +745,6 @@
   }
   return SAD;
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibEncoder/WeightPredAnalysis.h
===================================================================
--- source/Lib/TLibEncoder/WeightPredAnalysis.h	(revision 4998)
+++ source/Lib/TLibEncoder/WeightPredAnalysis.h	(working copy)
@@ -40,6 +40,7 @@
 #include "../TLibCommon/CommonDef.h"
 #include "../TLibCommon/TComSlice.h"
 #include "TEncCavlc.h"
+namespace pcc_hm {
 
 class  WeightPredAnalysis
 {
@@ -64,4 +65,6 @@
   Void  xCheckWPEnable       (TComSlice *const slice);
 };
 
+} // namespace pcc_hm
 #endif // __WEIGHTPREDANALYSIS__
+
Index: source/Lib/TLibVideoIO/TVideoIOYuv.cpp
===================================================================
--- source/Lib/TLibVideoIO/TVideoIOYuv.cpp	(revision 4998)
+++ source/Lib/TLibVideoIO/TVideoIOYuv.cpp	(working copy)
@@ -45,6 +45,7 @@
 
 #include "TLibCommon/TComRom.h"
 #include "TVideoIOYuv.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -1051,3 +1052,6 @@
       break;
   }
 }
+
+
+} // namespace pcc_hm
Index: source/Lib/TLibVideoIO/TVideoIOYuv.h
===================================================================
--- source/Lib/TLibVideoIO/TVideoIOYuv.h	(revision 4998)
+++ source/Lib/TLibVideoIO/TVideoIOYuv.h	(working copy)
@@ -43,6 +43,7 @@
 #include <iostream>
 #include "TLibCommon/CommonDef.h"
 #include "TLibCommon/TComPicYuv.h"
+namespace pcc_hm {
 
 using namespace std;
 
@@ -87,5 +88,7 @@
 
 };
 
+} // namespace pcc_hm
 #endif // __TVIDEOIOYUV__
 
+
Index: source/Lib/libmd5/MD5.h
===================================================================
--- source/Lib/libmd5/MD5.h	(revision 4998)
+++ source/Lib/libmd5/MD5.h	(working copy)
@@ -33,11 +33,12 @@
 #pragma once
 #include "libmd5.h"
 #include <string>
+namespace pcc_hm {
 
 //! \ingroup libMD5
 //! \{
 
-static const UInt MD5_DIGEST_STRING_LENGTH=16;
+static const uint32_t MD5_DIGEST_STRING_LENGTH=16;
 
 class MD5
 {
@@ -73,3 +74,5 @@
 
 
 //! \}
+
+}
\ No newline at end of file
Index: source/Lib/libmd5/libmd5.h
===================================================================
--- source/Lib/libmd5/libmd5.h	(revision 4998)
+++ source/Lib/libmd5/libmd5.h	(working copy)
@@ -56,3 +56,4 @@
 #endif
 
 //! \}
+
